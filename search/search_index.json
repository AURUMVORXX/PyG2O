{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"How to use","text":""},{"location":"#how-to-use","title":"How to use","text":"<ol> <li>Install G2O WebSocket module to your server</li> <li>Install JSON module to your server</li> <li>Download include/ folder and import the Squirrel part of the library: <pre><code>&lt;import src=\"include/pyg2o.xml\" /&gt;\n</code></pre></li> <li>Install python library to your application <pre><code>pip install pyg2o\n</code></pre></li> <li>Launch websocket client in your Squirrel scripts <pre><code>// PyG2O(url, silent, max_reconnect_attempts)\n// silent - disable information prints\n// max_reconnect_attempts - maximum reconnect attempts if server will stop the connection (0 - infinite attempts). This value doesn't reset on connection\n\n// Start server\nlocal srv = PyG2O(\"ws://localhost:8080\", false, 15)\nsrv.start()\n// Stop server\nsrv.stop()\n</code></pre></li> <li>In your application, launch asyncio event loop and websocket server <pre><code>import pyg2o\nimport asyncio\n\nsrv = None\n\nasync def main():\n    global srv\n    srv = pyg2o.PythonWebsocketServer(\n        host='localhost',\n        port=8080,\n        ping_interval=30,\n        whitelist=['::1'],\n    )\n    try:\n        await srv.start()\n    except asyncio.CancelledError:\n        await srv.stop()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre></li> </ol>"},{"location":"comparing/","title":"Comparing with Squirrel","text":"<ul> <li><code>addEventHandler</code> replaced with decorator event <pre><code>@pyg2o.event('onInit')\nasync def evtInitFirst():\n    print('Hello')\n\n@pyg2o.event('onInit', 100)       # '100' is priority\nasync def evtInitSecond():\n    print('World')\n</code></pre></li> </ul> <ul> <li>Positional arguments inside event handles replaced with keyword arguments (see names of all keywords on the each event page) <pre><code>@pyg2o.event('onPlayerChangeColor')\nasync def evtColor(playerid, r, g, b):\n    pass\n</code></pre></li> </ul> <ul> <li><code>callEvent</code> now also requires to pass keyword arguments instead of positional arguments <pre><code>@pyg2o.event('MyTestEvent')\nasync def testEvt(name, id):\n    print(name, id)\n\ng2o.callEvent('MyTestEvent', name = 'aurumvorax', id = 15)\n# OR\ng2o.callEvent('MyTestEvent', {'name': 'aurumvorax', 'id': 15})\n# OR\nargs = {'name': 'aurumvorax', 'id': 15}\nasyncio.create_task(pyg2o.callEvent('MyTestEvent', args))\n</code></pre></li> </ul>"},{"location":"comparing/#cancelevent-temporarily-disabled","title":"* <code>cancelEvent</code> temporarily disabled","text":"<ul> <li><code>isEventCancelled</code> replaced with built-in function property <code>cancelled</code>, alongside with the <code>eventName</code> <pre><code>@pyg2o.event('onPlayerDropItem')\nasync def evtDrop(**kwargs):\n    print(evtDrop.cancelled)\n    print(evtDrop.eventName)\n</code></pre></li> </ul> <p>Now all constants should be called via Constant class <pre><code>import pyg2o\n\n@pyg2o.event('onInit')\nasync def evt_init():\n    print(pyg2o.Constant.SERVER_SIDE)\n</code></pre> * Following functions and classes have been removed <sub><sup>RIP :(</sup> <pre><code>* `md5`\n* `sha1`\n* `sha256`\n* `sha384`\n* `sha512`\n* `setReloadCallback`\n* `setUnloadCallback`\n* `getTimerExecuteTimes`\n* `getTimerInterval`\n* `killTimer`\n* `setTimer`\n* `setTimerExecuteTimes`\n* `setTimerInterval`\n* `sscanf`\n* `hexToRgb`\n* `rgbToHex`\n* `getTickCount`\n* `eventValue`\n* `getPlayerMagicLevel`\n* `setPlayerMagicLevel`\n* `Packet`\n* `Way`\n* `NpcAction`\n</code></pre> <ul> <li> <p>Following constants has been removed:</p> <ul> <li><code>UNRELIABLE</code></li> <li><code>UNRELIABLE_SEQUENCED</code></li> <li><code>RELIABLE</code></li> <li><code>RELIABLE_SEQUENCED</code></li> <li><code>RELIABLE_ORDERED</code></li> </ul> <ul> <li>All functions and events that returned/passed a <code>null</code> in the Squirrel, now passes an empty string. Most notable in this list are all equipment related functions and events</li> <li><code>onPlayerEquipAmulet</code></li> <li><code>onPlayerEquipArmor</code></li> <li><code>onPlayerEquipBelt</code></li> <li><code>onPlayerEquipHandItem</code></li> <li><code>onPlayerEquipHelmet</code></li> <li><code>onPlayerEquipMeleeWeapon</code></li> <li><code>onPlayerEquipRangedWeapon</code></li> <li><code>onPlayerEquipRing</code></li> <li><code>onPlayerEquipShield</code></li> <li><code>onPlayerEquipSpell</code></li> <li><code>getPlayerAmulet</code></li> <li><code>getPlayerArmor</code></li> <li><code>getPlayerBelt</code></li> <li><code>getPlayerHelmet</code></li> <li><code>getPlayerMeleeWeapon</code></li> <li><code>getPlayerRangedWeapon</code></li> <li><code>getPlayerRing</code></li> <li><code>getPlayerShield</code></li> <li><code>getPlayerSpell</code></li> </ul> </li> </ul>"},{"location":"qna/","title":"QnA","text":""},{"location":"qna/#qna","title":"QnA","text":""},{"location":"qna/#1-do-i-need-to-install-python-to-use-it","title":"1. Do I need to install Python to use it?","text":"<p>Yes.</p>"},{"location":"qna/#2-can-i-use-external-python-libraries","title":"2. Can I use external Python libraries?","text":"<p>Yes, you can install it as usual (for example, via pip)</p>"},{"location":"qna/#3-can-i-use-it-as-client-side-module","title":"3. Can I use it as client-side module?","text":"<p>No, it doesn't support any client-side functionality, and there's no plans to add it for now due to security reasons and technical difficulties with client-side C++ modules.</p>"},{"location":"qna/#4-can-i-use-it-along-side-with-squirrel","title":"4. Can I use it along side with Squirrel?","text":"<p>No, in most cases you can't. This module do call Squirrel's root table and const table directly, but there's no way to transfer data between Python and Squirrel (such as variables or class instances).  But, if you want to use Squirrel and Python separately without data sharing, it should be ok (untested).</p>"},{"location":"classes/game/Daedalus/","title":"<code>static class</code> Daedalus","text":"<p>This class represents Daedalus scripting interface. Original: Daedalus</p> Source code in <code>src/pyg2o/classes/daedalus.py</code> <pre><code>class Daedalus:\n    \"\"\"\n    This class represents Daedalus scripting interface.\n    Original: [Daedalus](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-classes/game/Daedalus/)\n    \"\"\"\n    @staticmethod\n    async def index(value : str) -&gt; int:\n        \"\"\"\n        This method will get the daedalus symbol index by its name.\n        **Parameters:**\n        * `str` **name**: the name of the daedalus symbol.\n\n        **Returns `int`:**\n        the daedalus symbol index number.\n        \"\"\"\n        data = f'return Daedalus.index({value})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def symbol(value : str) -&gt; dict:\n        \"\"\"\n        This method will get the daedalus symbol by its name.\n        **Parameters:**\n        * `str` **name**: the name of the daedalus symbol.\n\n        **Returns `dict`:**\n        the daedalus symbol (empty if there's no symbol with given name)\n        \"\"\"\n        data = f'return Daedalus.symbol({value})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def instance(value : str) -&gt; dict:\n        \"\"\"\n        This method will get the all of the daedalus instance variables.\n        **Parameters:**\n        * `str` **instanceName**: the name of the daedalus instance.\n\n        **Returns `dict`:**\n        the object containing all of the daedalus instance variables.\n        \"\"\"\n        data = f'return Daedalus.instance({value})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n</code></pre>"},{"location":"classes/game/Daedalus/#src.pyg2o.classes.daedalus.Daedalus.index","title":"<code>index(value)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will get the daedalus symbol index by its name. Parameters: * <code>str</code> name: the name of the daedalus symbol.</p> <p>Returns <code>int</code>: the daedalus symbol index number.</p> Source code in <code>src/pyg2o/classes/daedalus.py</code> <pre><code>@staticmethod\nasync def index(value : str) -&gt; int:\n    \"\"\"\n    This method will get the daedalus symbol index by its name.\n    **Parameters:**\n    * `str` **name**: the name of the daedalus symbol.\n\n    **Returns `int`:**\n    the daedalus symbol index number.\n    \"\"\"\n    data = f'return Daedalus.index({value})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/game/Daedalus/#src.pyg2o.classes.daedalus.Daedalus.instance","title":"<code>instance(value)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will get the all of the daedalus instance variables. Parameters: * <code>str</code> instanceName: the name of the daedalus instance.</p> <p>Returns <code>dict</code>: the object containing all of the daedalus instance variables.</p> Source code in <code>src/pyg2o/classes/daedalus.py</code> <pre><code>@staticmethod\nasync def instance(value : str) -&gt; dict:\n    \"\"\"\n    This method will get the all of the daedalus instance variables.\n    **Parameters:**\n    * `str` **instanceName**: the name of the daedalus instance.\n\n    **Returns `dict`:**\n    the object containing all of the daedalus instance variables.\n    \"\"\"\n    data = f'return Daedalus.instance({value})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/game/Daedalus/#src.pyg2o.classes.daedalus.Daedalus.symbol","title":"<code>symbol(value)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will get the daedalus symbol by its name. Parameters: * <code>str</code> name: the name of the daedalus symbol.</p> <p>Returns <code>dict</code>: the daedalus symbol (empty if there's no symbol with given name)</p> Source code in <code>src/pyg2o/classes/daedalus.py</code> <pre><code>@staticmethod\nasync def symbol(value : str) -&gt; dict:\n    \"\"\"\n    This method will get the daedalus symbol by its name.\n    **Parameters:**\n    * `str` **name**: the name of the daedalus symbol.\n\n    **Returns `dict`:**\n    the daedalus symbol (empty if there's no symbol with given name)\n    \"\"\"\n    data = f'return Daedalus.symbol({value})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/game/DamageDescription/","title":"<code>class</code> DamageDescription","text":"<p>This class represents damage information. Original: DamageDescription</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--int-flags","title":"<code>int</code> flags","text":"<p>Represents the damage flags.</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--int-damage","title":"<code>int</code> damage","text":"<p>Represents the total damage taken.</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--str-item_instance-read-only","title":"<code>str</code> item_instance (read-only)","text":"<p>Note</p> <p>Can be empty if there is no weapon.</p> <p>Represents the weapon instance used to deal damage.</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--int-distance","title":"<code>int</code> distance","text":"<p>Represents the total distance, calculated from origin point to target.</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--int-spell_id","title":"<code>int</code> spell_id","text":"<p>Represents the spell id.</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--int-spell_level","title":"<code>int</code> spell_level","text":"<p>Represents the level of chargeable spells.</p>"},{"location":"classes/game/DamageDescription/#src.pyg2o.classes.damage.DamageDescription--str-node","title":"<code>str</code> node","text":"<p>Note</p> <p>Can be empty if there was no projectile.</p> <p>Represents the name of the node hit by a point projectile.</p> Source code in <code>src/pyg2o/classes/damage.py</code> <pre><code>class DamageDescription():\n    \"\"\"\n    This class represents damage information.\n    Original: [DamageDescription](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-classes/item/DamageDescription//)\n\n    ## `int` flags\n    Represents the damage flags.\n\n    ## `int` damage\n    Represents the total damage taken.\n\n    ## `str` item_instance *(read-only)*\n    !!! note\n        Can be empty if there is no weapon.\n    Represents the weapon instance used to deal damage.\n\n    ## `int` distance\n    Represents the total distance, calculated from origin point to target.\n\n    ## `int` spell_id\n    Represents the spell id.\n\n    ## `int` spell_level\n    Represents the level of chargeable spells.\n\n    ## `str` node\n    !!! note\n        Can be empty if there was no projectile.\n    Represents the name of the node hit by a point projectile.\n    \"\"\"\n    def __init__(self):\n        self._flags : int = 0\n        self._damage : int = 0\n        self._item_instance : str = ''\n        self._distance : int = 0\n        self._spell_id : int = 0\n        self._spell_level : int = 0\n        self._node : str = 0\n\n    def _initialize(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n    @property\n    def flags(self) -&gt; int:\n        return self._flags\n\n    @flags.setter\n    def flags(self, value):\n        self._flags = value\n\n    @property\n    def damage(self) -&gt; int:\n        return self._damage\n\n    @damage.setter\n    def damage(self, value):\n        self._damage = value\n\n    @property\n    def item_instance(self) -&gt; str:\n        return self._item_instance\n\n    @property\n    def distance(self) -&gt; int:\n        return self._distance\n\n    @distance.setter\n    def distance(self, value):\n        self._distance = value\n\n    @property\n    def spell_id(self) -&gt; int:\n        return self._spell_id\n\n    @spell_id.setter\n    def spell_id(self, value):\n        self._spell_id = value\n\n    @property\n    def spell_level(self) -&gt; int:\n        return self._spell_level\n\n    @spell_level.setter\n    def spell_level(self, value):\n        self._spell_level = value\n\n    @property\n    def node(self) -&gt; str:\n        return self._node\n\n    @node.setter\n    def node(self, value):\n        self._node = value\n</code></pre>"},{"location":"classes/game/Sky/","title":"<code>static class</code> Sky","text":"<p>This class represents data packet that gets send over the network. Original: Sky</p>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky--int-weather","title":"<code>int</code> weather","text":"<p>Represents the sky weather. For more information see Weather Constants</p>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky--bool-raining","title":"<code>bool</code> raining","text":"<p>Represents the raining/snowing state.</p>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky--bool-renderlightning","title":"<code>bool</code> renderLightning","text":"<p>Represents the lightning feature during raining state. Lightning will only be rendered during raining and when weatherWeight is larger than 0.5</p>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky--float-windscale","title":"<code>float</code> windScale","text":"<p>Represents the sky wind scale used during raining/snowing.</p>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky--bool-dontrain","title":"<code>bool</code> dontRain","text":"<p>Represents the sky dontRain feature. When it's enabled, the rain/snow won't fall.</p> Source code in <code>src/pyg2o/classes/sky.py</code> <pre><code>class Sky:\n    \"\"\"\n    This class represents data packet that gets send over the network.\n    Original: [Sky](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-classes/game/Sky/)\n\n    ## `int` weather\n    Represents the sky weather. For more information see [Weather Constants](../../constants/weather.md)\n\n    ## `bool` raining\n    Represents the raining/snowing state.\n\n    ## `bool` renderLightning\n    Represents the lightning feature during raining state.\n    Lightning will only be rendered during raining and when weatherWeight is larger than 0.5\n\n    ## `float` windScale\n    Represents the sky wind scale used during raining/snowing.\n\n    ## `bool` dontRain\n    Represents the sky dontRain feature.\n    When it's enabled, the rain/snow won't fall.\n    \"\"\"\n\n    @staticmethod\n    async def get_weather():\n        data = 'return Sky.weather'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def set_weather(value):\n        data = 'return Sky.weather = value'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def get_raining():\n        data = 'return Sky.raining'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def set_raining(value):\n        data = 'return Sky.raining = value'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def get_renderLightning():\n        data = 'return Sky.renderLightning'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def set_renderLightning(value):\n        data = 'return Sky.renderLightning = value'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def get_windScale():\n        data = 'return Sky.windScale'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def set_windScale(value):\n        data = 'return Sky.windScale = value'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def get_dontRain():\n        data = 'return Sky.dontRain'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def set_dontRain(value):\n        data = 'return Sky.dontRain = value'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def setRainStartTime(hour : int, minute : int):\n        \"\"\"\n        This method will set the sky weather time when it starts raining/snowing.\n        **Parameters:**\n        * `int` **hour**: the sky weather raining start hour.\n        * `int` **minute**: the sky weather raining start min.\n        \"\"\"\n        data = f'return Sky.setRainStartTime({hour}, {minute})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def setRainStopTime(hour : int, minute : int):\n        \"\"\"\n        This method will set the sky weather time when it stops raining/snowing.\n        **Parameters:**\n        * `int` **hour**: the sky weather raining stop hour.\n        * `int` **minute**: the sky weather raining stop min.\n        \"\"\"\n        data = f'return Sky.setRainStopTime({hour}, {minute})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def getRainStartTime() -&gt; dict:\n        \"\"\"\n        This method will get the sky weather time when it starts raining/snowing.\n        **Returns `dict`:**\n        * `int` **hour**: the sky weather raining start hour.\n        * `int` **minute**: the sky weather raining start min.\n        \"\"\"\n        data = 'return Sky.getRainStartTime()'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def getRainStopTime() -&gt; dict:\n        \"\"\"\n        This method will get the sky weather time when it stops raining/snowing.\n        **Returns `dict`:**\n        * `int` **hour**: the sky weather raining stop hour.\n        * `int` **minute**: the sky weather raining stop min.\n        \"\"\"\n        data = 'return Sky.getRainStopTime()'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n</code></pre>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky.getRainStartTime","title":"<code>getRainStartTime()</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will get the sky weather time when it starts raining/snowing. Returns <code>dict</code>: * <code>int</code> hour: the sky weather raining start hour. * <code>int</code> minute: the sky weather raining start min.</p> Source code in <code>src/pyg2o/classes/sky.py</code> <pre><code>@staticmethod\nasync def getRainStartTime() -&gt; dict:\n    \"\"\"\n    This method will get the sky weather time when it starts raining/snowing.\n    **Returns `dict`:**\n    * `int` **hour**: the sky weather raining start hour.\n    * `int` **minute**: the sky weather raining start min.\n    \"\"\"\n    data = 'return Sky.getRainStartTime()'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky.getRainStopTime","title":"<code>getRainStopTime()</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will get the sky weather time when it stops raining/snowing. Returns <code>dict</code>: * <code>int</code> hour: the sky weather raining stop hour. * <code>int</code> minute: the sky weather raining stop min.</p> Source code in <code>src/pyg2o/classes/sky.py</code> <pre><code>@staticmethod\nasync def getRainStopTime() -&gt; dict:\n    \"\"\"\n    This method will get the sky weather time when it stops raining/snowing.\n    **Returns `dict`:**\n    * `int` **hour**: the sky weather raining stop hour.\n    * `int` **minute**: the sky weather raining stop min.\n    \"\"\"\n    data = 'return Sky.getRainStopTime()'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky.setRainStartTime","title":"<code>setRainStartTime(hour, minute)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will set the sky weather time when it starts raining/snowing. Parameters: * <code>int</code> hour: the sky weather raining start hour. * <code>int</code> minute: the sky weather raining start min.</p> Source code in <code>src/pyg2o/classes/sky.py</code> <pre><code>@staticmethod\nasync def setRainStartTime(hour : int, minute : int):\n    \"\"\"\n    This method will set the sky weather time when it starts raining/snowing.\n    **Parameters:**\n    * `int` **hour**: the sky weather raining start hour.\n    * `int` **minute**: the sky weather raining start min.\n    \"\"\"\n    data = f'return Sky.setRainStartTime({hour}, {minute})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/game/Sky/#src.pyg2o.classes.sky.Sky.setRainStopTime","title":"<code>setRainStopTime(hour, minute)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will set the sky weather time when it stops raining/snowing. Parameters: * <code>int</code> hour: the sky weather raining stop hour. * <code>int</code> minute: the sky weather raining stop min.</p> Source code in <code>src/pyg2o/classes/sky.py</code> <pre><code>@staticmethod\nasync def setRainStopTime(hour : int, minute : int):\n    \"\"\"\n    This method will set the sky weather time when it stops raining/snowing.\n    **Parameters:**\n    * `int` **hour**: the sky weather raining stop hour.\n    * `int` **minute**: the sky weather raining stop min.\n    \"\"\"\n    data = f'return Sky.setRainStopTime({hour}, {minute})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemGround/","title":"<code>static class</code> ItemGround","text":"<p>This class represents item on the ground. Original: ItemGround</p>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround--int-id-read-only","title":"<code>int</code> id (read-only)","text":"<p>Represents the unique id of the item ground.</p>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround--str-instance-read-only","title":"<code>str</code> instance (read-only)","text":"<p>Represents the item instance of the item ground.</p>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround--int-amount-read-only","title":"<code>int</code> amount (read-only)","text":"<p>Represents the item amount of item ground.</p>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround--str-world-read-only","title":"<code>str</code> world (read-only)","text":"<p>Represents the item ground world (.ZEN file path).</p>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround--int-virtualworld","title":"<code>int</code> virtualWorld","text":"<p>Represents the virtual world of item ground.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>class ItemGround:\n    \"\"\"\n    This class represents item on the ground.\n    Original: [ItemGround](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-classes/item/ItemGround//)\n\n    ## `int` id *(read-only)*\n    Represents the unique id of the item ground.\n\n    ## `str` instance *(read-only)*\n    Represents the item instance of the item ground.\n\n    ## `int` amount *(read-only)*\n    Represents the item amount of item ground.\n\n    ## `str` world *(read-only)*\n    Represents the item ground world (.ZEN file path).\n\n    ## `int` virtualWorld\n    Represents the virtual world of item ground.\n    \"\"\"\n    def __init__(self):\n        self._id = -1\n        self._instance = ''\n        self._amount = -1\n        self._world = -1\n        self._virtualWorld = -1\n        self._position = -1\n        self._rotation = -1\n\n    def getPosition(self) -&gt; dict:\n        \"\"\"\n        This method will get the item ground position on the world.\n        **Returns `tuple(float, float, float)`:**\n        `X-Y-Z` item ground position on the world.\n        \"\"\"\n        return self._position\n\n    def getRotation(self) -&gt; dict:\n        \"\"\"\n        This method will get the item ground rotation on the world.\n        **Returns `tuple(float, float, float)`:**\n        `X-Y-Z` item ground roration on the world.\n        \"\"\"\n        return self._rotation\n\n    async def setPosition(self, x: float, y: float, z: float):\n        \"\"\"\n        This method will set the item ground position in the world.\n        **Parameters:**\n        * `float` **x**: the position in the world on the x axis.\n        * `float` **y**: the position in the world on the y axis.\n        * `float` **z**: the position in the world on the z axis.\n        \"\"\"\n        data = f'return ItemsGround.getById({self.id}).setPosition({x}, {y}, {z})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    async def setRotation(self, x: float, y: float, z: float):\n        \"\"\"\n        This method will set the item ground rotation in the world.\n        **Parameters:**\n        * `float` **x**: the rotation in the world on the x axis.\n        * `float` **y**: the rotation in the world on the y axis.\n        * `float` **z**: the rotation in the world on the z axis.\n        \"\"\"\n        data = f'return ItemsGround.getById({self.id}).setRotation({x}, {y}, {z})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    async def get_physicsEnabled(self) -&gt; bool:\n        \"\"\"\n        This method will get the item ground physicsEnabled flag.\n        **Returns:**\n        * `bool`: ``true`` if physics is enabled, otherwise ``false``\n        \"\"\"\n        data = f'return ItemsGround.getById({self.id}).physicsEnabled'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    async def set_physicsEnabled(self, enabled: bool):\n        \"\"\"\n        This method will set the item ground physicsEnabled flag.\n        **Parameters:**\n        * `bool` **enabled**: represents the state of physicsEnabled flag\n        \"\"\"\n        data = f'return ItemsGround.getById({self.id}).physicsEnabled = {enabled}'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @property\n    def id(self) -&gt; int:\n        return self._id\n\n    @property\n    def instance(self) -&gt; str:\n        return self._instance\n\n    @property\n    def amount(self) -&gt; int:\n        return self._amount\n\n    @property\n    def world(self) -&gt; str:\n        return self._world\n\n    @property\n    def virtualWorld(self) -&gt; int:\n        return self._virtualWorld\n\n    @virtualWorld.setter\n    def virtualWorld(self, value):\n        self._virtualWorld = value\n\n    def _initialize(self, **kwargs):\n        self.__dict__.update(kwargs)\n</code></pre>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround.getPosition","title":"<code>getPosition()</code>","text":"<p>This method will get the item ground position on the world. Returns <code>tuple(float, float, float)</code>: <code>X-Y-Z</code> item ground position on the world.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>def getPosition(self) -&gt; dict:\n    \"\"\"\n    This method will get the item ground position on the world.\n    **Returns `tuple(float, float, float)`:**\n    `X-Y-Z` item ground position on the world.\n    \"\"\"\n    return self._position\n</code></pre>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround.getRotation","title":"<code>getRotation()</code>","text":"<p>This method will get the item ground rotation on the world. Returns <code>tuple(float, float, float)</code>: <code>X-Y-Z</code> item ground roration on the world.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>def getRotation(self) -&gt; dict:\n    \"\"\"\n    This method will get the item ground rotation on the world.\n    **Returns `tuple(float, float, float)`:**\n    `X-Y-Z` item ground roration on the world.\n    \"\"\"\n    return self._rotation\n</code></pre>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround.get_physicsEnabled","title":"<code>get_physicsEnabled()</code>  <code>async</code>","text":"<p>This method will get the item ground physicsEnabled flag. Returns: * <code>bool</code>: <code>true</code> if physics is enabled, otherwise <code>false</code></p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>async def get_physicsEnabled(self) -&gt; bool:\n    \"\"\"\n    This method will get the item ground physicsEnabled flag.\n    **Returns:**\n    * `bool`: ``true`` if physics is enabled, otherwise ``false``\n    \"\"\"\n    data = f'return ItemsGround.getById({self.id}).physicsEnabled'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround.setPosition","title":"<code>setPosition(x, y, z)</code>  <code>async</code>","text":"<p>This method will set the item ground position in the world. Parameters: * <code>float</code> x: the position in the world on the x axis. * <code>float</code> y: the position in the world on the y axis. * <code>float</code> z: the position in the world on the z axis.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>async def setPosition(self, x: float, y: float, z: float):\n    \"\"\"\n    This method will set the item ground position in the world.\n    **Parameters:**\n    * `float` **x**: the position in the world on the x axis.\n    * `float` **y**: the position in the world on the y axis.\n    * `float` **z**: the position in the world on the z axis.\n    \"\"\"\n    data = f'return ItemsGround.getById({self.id}).setPosition({x}, {y}, {z})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround.setRotation","title":"<code>setRotation(x, y, z)</code>  <code>async</code>","text":"<p>This method will set the item ground rotation in the world. Parameters: * <code>float</code> x: the rotation in the world on the x axis. * <code>float</code> y: the rotation in the world on the y axis. * <code>float</code> z: the rotation in the world on the z axis.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>async def setRotation(self, x: float, y: float, z: float):\n    \"\"\"\n    This method will set the item ground rotation in the world.\n    **Parameters:**\n    * `float` **x**: the rotation in the world on the x axis.\n    * `float` **y**: the rotation in the world on the y axis.\n    * `float` **z**: the rotation in the world on the z axis.\n    \"\"\"\n    data = f'return ItemsGround.getById({self.id}).setRotation({x}, {y}, {z})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemGround/#src.pyg2o.classes.items.ItemGround.set_physicsEnabled","title":"<code>set_physicsEnabled(enabled)</code>  <code>async</code>","text":"<p>This method will set the item ground physicsEnabled flag. Parameters: * <code>bool</code> enabled: represents the state of physicsEnabled flag</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>async def set_physicsEnabled(self, enabled: bool):\n    \"\"\"\n    This method will set the item ground physicsEnabled flag.\n    **Parameters:**\n    * `bool` **enabled**: represents the state of physicsEnabled flag\n    \"\"\"\n    data = f'return ItemsGround.getById({self.id}).physicsEnabled = {enabled}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemsGround/","title":"<code>static class</code> ItemsGround","text":"<p>This class represents item ground manager. Original: ItemsGround</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>class ItemsGround:\n    \"\"\"\n    This class represents item ground manager.\n    Original: [ItemsGround](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-classes/item/ItemsGround/)\n    \"\"\"\n    @staticmethod\n    async def getById(id : int):\n        \"\"\"\n        This method will retrieve the item ground object by its unique id.\n\n        **Parameters:**\n        * `int` **itemGroundId**: the unique item ground id.\n\n        **Returns `ItemGround`:**\n        the item ground object or `throws an exception` if the object cannot be found.\n        \"\"\"\n        data = f'return ItemsGround.getById({id})'\n\n        # TODO: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e ItemGround\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def create(data : dict) -&gt; int:\n        \"\"\"\n        This method will create the item ground.\n\n        **Parameters:**\n        * `dict {instance, amount=1, physicsEnabled=false position={x=0,y=0,z=0}, rotation={x=0,y=0,z=0}, world=CONFIG_WORLD, virtualWorld=0}`:\n        * `string` **instance**: the scripting instance of game item.\n        * `bool` **physicsEnabled**: the physics state of the item ground.\n        * `dict {x, y, z}` **position**: the position of the item ground in the world.\n        * `dict {x, y, z}` **rotation**: the rotation of the item ground in the world.\n        * `string` **world**: the world the item ground is in (.ZEN file path).\n        * `int` **virtualWorld**: the virtual world id in range &lt;0, 65535&gt;.\n\n        **Returns `int`:**\n        the item ground id.\n        \"\"\"\n        data = f'return ItemsGround.create({data})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def destroy(id : int):\n        \"\"\"\n        This method will destroy the item ground by it's unique id.\n        **Parameters:**\n        * `int` **itemGroundId**: the item ground unique id.\n        \"\"\"\n        data = f'return ItemsGround.destroy({id})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n</code></pre>"},{"location":"classes/item/ItemsGround/#src.pyg2o.classes.items.ItemsGround.create","title":"<code>create(data)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will create the item ground.</p> <p>Parameters: * <code>dict {instance, amount=1, physicsEnabled=false position={x=0,y=0,z=0}, rotation={x=0,y=0,z=0}, world=CONFIG_WORLD, virtualWorld=0}</code>: * <code>string</code> instance: the scripting instance of game item. * <code>bool</code> physicsEnabled: the physics state of the item ground. * <code>dict {x, y, z}</code> position: the position of the item ground in the world. * <code>dict {x, y, z}</code> rotation: the rotation of the item ground in the world. * <code>string</code> world: the world the item ground is in (.ZEN file path). * <code>int</code> virtualWorld: the virtual world id in range &lt;0, 65535&gt;.</p> <p>Returns <code>int</code>: the item ground id.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>@staticmethod\nasync def create(data : dict) -&gt; int:\n    \"\"\"\n    This method will create the item ground.\n\n    **Parameters:**\n    * `dict {instance, amount=1, physicsEnabled=false position={x=0,y=0,z=0}, rotation={x=0,y=0,z=0}, world=CONFIG_WORLD, virtualWorld=0}`:\n    * `string` **instance**: the scripting instance of game item.\n    * `bool` **physicsEnabled**: the physics state of the item ground.\n    * `dict {x, y, z}` **position**: the position of the item ground in the world.\n    * `dict {x, y, z}` **rotation**: the rotation of the item ground in the world.\n    * `string` **world**: the world the item ground is in (.ZEN file path).\n    * `int` **virtualWorld**: the virtual world id in range &lt;0, 65535&gt;.\n\n    **Returns `int`:**\n    the item ground id.\n    \"\"\"\n    data = f'return ItemsGround.create({data})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemsGround/#src.pyg2o.classes.items.ItemsGround.destroy","title":"<code>destroy(id)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will destroy the item ground by it's unique id. Parameters: * <code>int</code> itemGroundId: the item ground unique id.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>@staticmethod\nasync def destroy(id : int):\n    \"\"\"\n    This method will destroy the item ground by it's unique id.\n    **Parameters:**\n    * `int` **itemGroundId**: the item ground unique id.\n    \"\"\"\n    data = f'return ItemsGround.destroy({id})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/item/ItemsGround/#src.pyg2o.classes.items.ItemsGround.getById","title":"<code>getById(id)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will retrieve the item ground object by its unique id.</p> <p>Parameters: * <code>int</code> itemGroundId: the unique item ground id.</p> <p>Returns <code>ItemGround</code>: the item ground object or <code>throws an exception</code> if the object cannot be found.</p> Source code in <code>src/pyg2o/classes/items.py</code> <pre><code>@staticmethod\nasync def getById(id : int):\n    \"\"\"\n    This method will retrieve the item ground object by its unique id.\n\n    **Parameters:**\n    * `int` **itemGroundId**: the unique item ground id.\n\n    **Returns `ItemGround`:**\n    the item ground object or `throws an exception` if the object cannot be found.\n    \"\"\"\n    data = f'return ItemsGround.getById({id})'\n\n    # TODO: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e ItemGround\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/mds/Mds/","title":"<code>static class</code> Mds","text":"<p>This class represents mds manager for conversion between mds id &amp; mds instance. This manager will work for every registered mds in <code>mds.xml</code> file. Original: Mds</p> Source code in <code>src/pyg2o/classes/mds.py</code> <pre><code>class Mds:\n    \"\"\"\n    This class represents mds manager for conversion between mds id &amp; mds instance. This manager will work for every registered mds in `mds.xml` file.\n    Original: [Mds](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-classes/mds/Mds/)\n    \"\"\"\n    @staticmethod\n    async def id(mdsName : str) -&gt; int:\n        \"\"\"\n        This method will convert the mds name to mds id.\n        **Parameters:**\n        * `str` **mdsName**: the mds name, e.g: `\"HumanS_Sprint.mds\"`.\n\n        **Returns `int`:**\n        the unique mds id.\n        \"\"\"\n        data = f'return Mds.id({mdsName})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n\n    @staticmethod\n    async def name(mdsId : int) -&gt; str:\n        \"\"\"\n        This method will convert the mds id to mds name.\n        **Parameters:**\n        * `int` **mdsId**: the mds id.\n\n        **Returns `str`:**\n        the mds name, e.g: `\"HumanS_Sprint.mds\"`.\n        \"\"\"\n        data = f'return Mds.id({mdsId})'\n\n        server = await PythonWebsocketServer.get_server()\n        result = await server.make_request(data)\n        return result\n</code></pre>"},{"location":"classes/mds/Mds/#src.pyg2o.classes.mds.Mds.id","title":"<code>id(mdsName)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will convert the mds name to mds id. Parameters: * <code>str</code> mdsName: the mds name, e.g: <code>\"HumanS_Sprint.mds\"</code>.</p> <p>Returns <code>int</code>: the unique mds id.</p> Source code in <code>src/pyg2o/classes/mds.py</code> <pre><code>@staticmethod\nasync def id(mdsName : str) -&gt; int:\n    \"\"\"\n    This method will convert the mds name to mds id.\n    **Parameters:**\n    * `str` **mdsName**: the mds name, e.g: `\"HumanS_Sprint.mds\"`.\n\n    **Returns `int`:**\n    the unique mds id.\n    \"\"\"\n    data = f'return Mds.id({mdsName})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"classes/mds/Mds/#src.pyg2o.classes.mds.Mds.name","title":"<code>name(mdsId)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>This method will convert the mds id to mds name. Parameters: * <code>int</code> mdsId: the mds id.</p> <p>Returns <code>str</code>: the mds name, e.g: <code>\"HumanS_Sprint.mds\"</code>.</p> Source code in <code>src/pyg2o/classes/mds.py</code> <pre><code>@staticmethod\nasync def name(mdsId : int) -&gt; str:\n    \"\"\"\n    This method will convert the mds id to mds name.\n    **Parameters:**\n    * `int` **mdsId**: the mds id.\n\n    **Returns `str`:**\n    the mds name, e.g: `\"HumanS_Sprint.mds\"`.\n    \"\"\"\n    data = f'return Mds.id({mdsId})'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"constants/anticheat/","title":"AntiCheat","text":"<p>Original: AntiCheat</p> Name Description AC_SPEED_HACK Represents speed hack state."},{"location":"constants/context/","title":"Context","text":"<p>Original: Context</p> Name Description DAMAGE_CTX Represents damage script context.  Damage context extends packet, that sent information about hit. EQUIPMENT_CTX Represents equipment script context.  Equipment context extends packet, that sent information about equip/unequip/use item."},{"location":"constants/damage/","title":"Damage","text":"<p>Original: Damage</p> Name Description DAMAGE_UNKNOWN Represents unknown damage type. DAMAGE_BARRIER Represents barrier damage type. DAMAGE_BLUNT Represents blunt (weapon) damage type. DAMAGE_EDGE Represents edge/sharp (weapon) damage type. DAMAGE_FIRE Represents fire damage type. DAMAGE_FLY Represents fly damage type. DAMAGE_MAGIC Represents magic damage type. DAMAGE_POINT Represents point (weapon) damage type. DAMAGE_FALL Represents fall damage type."},{"location":"constants/general/","title":"General","text":"<p>Original: General</p> Name Description DEBUG_MODE Represents debug mode state. CLIENT_SIDE <code>true</code> if parsed script is on client-side, otherwise <code>false</code>. SERVER_SIDE <code>true</code> if parsed script is on server-side, otherwise <code>false</code>."},{"location":"constants/hand/","title":"Hand","text":"<p>Original: Hand</p> Name Description HAND_LEFT Represents npc left hand slot id. HAND_RIGHT Represents npc right hand slot id."},{"location":"constants/item/","title":"Item","text":"<p>Original: Item</p> Name Description ITEM_CAT_NONE Represents item flag for uncategorized items. ITEM_CAT_NF Represents item flag for all melee weapons. ITEM_CAT_FF Represents item flag for all ranged weapons. ITEM_CAT_MUN Represents item flag for all types of ammunition. ITEM_CAT_ARMOR Represents item flag for armors. ITEM_CAT_FOOD Represents item flag for all food items. ITEM_CAT_DOCS Represents item flag for all documents. ITEM_CAT_POTION Represents item flag for all potions. ITEM_CAT_LIGHT Represents item flag for all light sources (unused). ITEM_CAT_RUNE Represents item flag for runes. ITEM_CAT_MAGIC Represents item flag for magic items. ITEM_FLAG_DAG Represents flag for weapons treated as daggers. ITEM_FLAG_SWD Represents flag for weapons treated as swords. ITEM_FLAG_AXE Represents flag for weapons treated as axes. ITEM_FLAG_2HD_SWD Represents flag for weapons treated as two-handed swords. ITEM_FLAG_2HD_AXE Represents flag for weapons treated as two-handed axes. ITEM_FLAG_SHIELD Represents flag for weapons treated as shields. ITEM_FLAG_BOW Represents flag for weapons treated as bows. ITEM_FLAG_CROSSBOW Represents flag for weapons treated as crossbows. ITEM_FLAG_RING Represents flag for items treated as rings. ITEM_FLAG_AMULET Represents flag for items treated as amulets. ITEM_FLAG_BELT Represents flag for items treated as belts. ITEM_FLAG_DROPPED Represents flag for items that have been dropped (internal use). ITEM_FLAG_MI Represents flag for mission items. ITEM_FLAG_MULTI Represents flag for multi-item slots. ITEM_FLAG_NFOCUS Represents flag for items to be ignored in focus (lighting swell). ITEM_FLAG_CREATEAMMO Represents unused flag for weapons. ITEM_FLAG_NSPLIT Represents flag for disabling the item splitting feature. ITEM_FLAG_DRINK Represents flag for items that are drinks. ITEM_FLAG_TORCH Represents flag for items treated as torches. ITEM_FLAG_THROW Represents flag for items that can be thrown (unused). ITEM_FLAG_ACTIVE Represents flag for items equipped in inventory. ITEM_WEAR_NO Represents wear type for items that cannot be worn. ITEM_WEAR_TORSO Represents wear type for items worn on the torso. ITEM_WEAR_HEAD Represents wear type for items worn on the head. ITEM_WEAR_LIGHT Represents unused wear type for items."},{"location":"constants/network/","title":"Network","text":"<p>Original: Network</p> Name Description DISCONNECTED Represents disconnected player state. LOST_CONNECTION Represents lost connection player state. HAS_CRASHED Represents crash player state."},{"location":"constants/npc/","title":"NPC","text":"<p>Original: NPC</p> Name Description ATTACK_RUN Represents attack run type. ATTACK_FORWARD Represents attack forward type. ATTACK_LEFT Represents attack left type. ATTACK_RIGHT Represents attack right type. ACTION_CLEAR_QUEUE Represents action clear queue type. ACTION_APPLY_OVERLAY Represents action apply overlay type. ACTION_REMOVE_OVERLAY Represents action remove overlay type. ACTION_PLAY_ANI Represents action play ani type. ACTION_STOP_ANI Represents action stop ani type. ACTION_EQUIP_ITEM Represents action equip item type. ACTION_UNEQUIP_ITEM Represents action unequip item type. ACTION_WEAPON_MODE Represents action change weapon mode type. ACTION_DRAW_WEAPON Represents action draw weapon type. ACTION_REMOVE_WEAPON Represents action remove weapon type. ACTION_USE_ITEM Represents action use item type. ACTION_USE_ITEM_TO_STATE Represents action use item to state type. ACTION_READY_SPELL Represents action ready spell type. ACTION_UNREADY_SPELL Represents action unready spell type. ACTION_ATTACK_MELEE_WEAPON Represents action attack melee weapon type. ACTION_ATTACK_RANGED_WEAPON Represents action attack ranged weapon type. ACTION_SPELL_CAST Represents action spell cast type. ACTION_USE_MOB_SCHEME Represents action use mob scheme type. ACTION_SHOOT_AT Represents action shoot at type. ACTION_START_AIM_AT Represents action start aim at type. ACTION_STOP_AIM_AT Represents action stop aim at type. ACTION_SCRIPT Represents action script type."},{"location":"constants/reliability/","title":"Reliability","text":"<p>Original: Reliability</p> Name Description UNRELIABLE Unreliable packets are sent by straight UDP. They may arrive out of order, or not at all. This is best for data that is unimportant, or data that you send very frequently so even if some packets are missed newer packets will compensate. Advantages - These packets don't need to be acknowledged by the network, saving the size of a UDP header in acknowledgment (about 50 bytes or so). The savings can really add up. Disadvantages - No packet ordering, packets may never arrive, these packets are the first to get dropped if the send buffer is full. UNRELIABLE_SEQUENCED Unreliable sequenced packets are the same as unreliable packets, except that only the newest packet is ever accepted. Older packets are ignored. Advantages - Same low overhead as unreliable packets, and you don't have to worry about older packets changing your data to old values. Disadvantages - A LOT of packets will be dropped since they may never arrive because of UDP and may be dropped even when they do arrive. These packets are the first to get dropped if the send buffer is full. The last packet sent may never arrive, which can be a problem if you stop sending packets at some particular point. Note that the transmission of one of the three reliable packets types is required for the detection of lost connections. If you never send reliable packets you need to implement lost connection detection manually. RELIABLE Reliable packets are UDP packets monitored by a reliablilty layer to ensure they arrive at the destination. Advantages - You know the packet will get there. Eventually... Disadvantages - Retransmissions and acknowledgments can add significant bandwidth requirements. Packets may arrive very late if the network is busy. No packet ordering. RELIABLE_ORDERED Reliable ordered packets are UDP packets monitored by a reliability layer to ensure they arrive at the destination and are ordered at the destination. Advantages - The packet will get there and in the order it was sent. These are by far the easiest to program for because you don't have to worry about strange behavior due to out of order or lost packets. Disadvantages - Retransmissions and acknowledgments can add significant bandwidth requirements. Packets may arrive very late if the network is busy. One late packet can delay many packets that arrived sooner, resulting in significant lag spikes. However, this disadvantage can be mitigated by the clever use of ordering streams. RELIABLE_SEQUENCED Reliable sequenced packets are UDP packets monitored by a reliability layer to ensure they arrive at the destination and are sequenced at the destination.  Advantages - You get the reliability of UDP packets, the ordering of ordered packets, yet don't have to wait for old packets. More packets will arrive with this method than with the unreliable sequenced method, and they will be distributed more evenly. The most important advantage however is that the latest packet sent will arrive, where with unreliable sequenced the latest packet sent may not arrive. Disadvantages - Wasteful of bandwidth because it uses the overhead of reliable UDP packets to ensure late packets arrive that just get ignored anyway."},{"location":"constants/skill-weapon/","title":"Skill weapon","text":"<p>Original: Skill weapon</p> Name Description WEAPON_1H Represents npc one handed weapon skill. WEAPON_2H Represents npc two handed weapon skill. WEAPON_BOW Represents npc bow weapon skill. WEAPON_CBOW Represents npc crossbow weapon skill."},{"location":"constants/talent/","title":"Talent","text":"<p>Original: Talent</p> Name Description TALENT_1H Represents npc one handed weapon skill talent (valid talent values are: 0,1,2). TALENT_2H Represents npc two handed weapon skill talent (valid talent values are: 0,1,2). TALENT_BOW Represents npc bow weapon skill talent (valid talent values are: 0,1,2). TALENT_CROSSBOW Represents npc crossbow weapon skill talent (valid talent values are: 0,1,2). TALENT_PICK_LOCKS Represents npc picklock talent. TALENT_PICKPOCKET Represents npc pickpocket talent. TALENT_MAGE Represents npc magic circle talent. TALENT_SNEAK Represents npc sneak talent. TALENT_REGENERATE Represents npc health regeneration talent. TALENT_FIREMASTER Represents npc firemaster talent (unused by the game). TALENT_ACROBATIC Represents npc acrobatic talent. TALENT_PICKPOCKET_UNUSED Represents npc old pickpocket talent (unused by the game). TALENT_SMITH Represents npc smith talent. TALENT_RUNES Represents npc runes creation talent. TALENT_ALCHEMY Represents npc potion creation talent. TALENT_THROPHY Represents npc trophy gathering talent. TALENT_A Represents npc talent A (unused by the game). TALENT_B Represents npc talent B (unused by the game). TALENT_C Represents npc talent C (unused by the game). TALENT_D Represents npc talent D (unused by the game). TALENT_E Represents npc talent E (unused by the game). TALENT_MAX Represents maximum number of talents (the id itself isn't valid, it's mostly useful in for loops)."},{"location":"constants/weapon-mode/","title":"Weapon mode","text":"<p>Original: Weapon mode</p> Name Description WEAPONMODE_NONE Represents npc none weapon mode. WEAPONMODE_FIST Represents npc fist weapon mode. WEAPONMODE_DAG Represents npc dagger weapon mode. WEAPONMODE_1HS Represents npc one handed weapon mode (melee weapon). WEAPONMODE_2HS Represents npc two handed weapon mode (melee weapon). WEAPONMODE_BOW Represents npc bow weapon mode (ranged weapon). WEAPONMODE_CBOW Represents npc crossbow weapon mode (ranged weapon). WEAPONMODE_MAG Represents npc magic weapon mode (spell). WEAPONMODE_MAX Represents npc maximum weapon mode (not actuall weapon mode, weapon modes count)."},{"location":"constants/weather/","title":"Weather","text":"<p>Original: Weather</p> Name Description WEATHER_SNOW Represents snowing weather type. WEATHER_RAIN Represents raining weather type."},{"location":"defaultEvents/anticheat/onPlayerUseCheat/","title":"<code>event</code> onPlayerUseCheat","text":"<p>Note</p> <p>Detecting some type of forbidden tools may take, even a few minutes. Server need time to analyze player data.</p> <p>This event is triggered when player uses some of forbidden cheat tools.</p> <p>Original: onPlayerUseCheat</p>"},{"location":"defaultEvents/anticheat/onPlayerUseCheat/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who used some type of trainer/cheat.</li> <li><code>int</code> type: the type of used trainer/cheat. For more information see AntiCheat constants</li> </ul> </li> </ul>"},{"location":"defaultEvents/anticheat/onPlayerUseCheat/#usage","title":"Usage","text":"<pre><code>import pyg2o\n\n@pyg2o.event('onPlayerUseCheat')\nasync def onCheat(playerid, type):\n    print(f'Player {playerid} used forbidden cheat tool type {type}.')\n</code></pre>"},{"location":"defaultEvents/general/onBan/","title":"<code>event</code> onBan","text":"<p>This event can be cancelled</p> <p>Note</p> <p>If serial/mac/ip/name indexes doesn't exist, then the parameters has not been specified when ban was added. If timestamp doesn't exist, then ban was permanent.</p> <p>This event is triggered when new ban is being added.</p> <p>Original: onBan</p>"},{"location":"defaultEvents/general/onBan/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>str</code> mac: MAC address of the banned player.</li> <li><code>str</code> ip: IP address of the banned player.</li> <li><code>str</code> serial: serial of the banned player.</li> <li><code>str</code> name: nickname of the banned player.</li> <li><code>int</code> timestamp: timestamp when the ban expires.</li> </ul> </li> </ul>"},{"location":"defaultEvents/general/onBan/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\nfrom datetime import datetime\n\n@g2o.event('onBan')\nasync def onBan(banInfo):\n    print(f'Player {banInfo['name']} has been banned.')\n    if ('timestamp' in banInfo):\n        banExpires = datetime.fromtimestamp(banInfo['timestamp'])\n        print(f'Ban expires at {banExpires}')\n</code></pre>"},{"location":"defaultEvents/general/onExit/","title":"<code>event</code> onExit","text":"<p>This event is triggered when server is going to shut down. You can use it, to save some data before closing up, or do something else.</p> <p>Original: onExit</p>"},{"location":"defaultEvents/general/onExit/#parameters","title":"Parameters","text":"<p>No parameters.</p>"},{"location":"defaultEvents/general/onExit/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onExit')\nasync def onExitEvt():\n    print('Bye')\n</code></pre>"},{"location":"defaultEvents/general/onInit/","title":"<code>event</code> onInit","text":"<p>This event is triggered when server successfully starts up.</p> <p>Original: onExit</p>"},{"location":"defaultEvents/general/onInit/#parameters","title":"Parameters","text":"<p>No parameters.</p>"},{"location":"defaultEvents/general/onInit/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onInit')\nasync def onInitEventHandler():\n    print('Called onInit event')\n</code></pre>"},{"location":"defaultEvents/general/onTick/","title":"<code>event</code> onTick","text":"<p>This event is triggered in every server main loop iteration.</p> <p>Original: onExit</p>"},{"location":"defaultEvents/general/onTick/#parameters","title":"Parameters","text":"<p>No parameters.</p>"},{"location":"defaultEvents/general/onTick/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onTick')\nasync def onTickEvt():\n    print('Tock')\n</code></pre>"},{"location":"defaultEvents/general/onTime/","title":"<code>event</code> onTime","text":"<p>This event is triggered each time when game time minute passes.</p> <p>Original: onExit</p>"},{"location":"defaultEvents/general/onTime/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> day: the current ingame day.</li> <li><code>int</code> hour: the current ingame hour.</li> <li><code>int</code> min: the current ingame minutes.</li> </ul> </li> </ul>"},{"location":"defaultEvents/general/onTime/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onTime')\nasync def onTickEvt(day, hour, min):\n    print(f'Current time: Day {day}, Hour {hour}, Min {mins}')\n</code></pre>"},{"location":"defaultEvents/general/onUnban/","title":"<code>event</code> onUnban","text":"<p>This event can be cancelled</p> <p>Note</p> <p>If serial/mac/ip/name indexes doesn't exist, then the parameters has not been specified when ban was added. If timestamp doesn't exist, then ban was permanent.</p> <p>This event is triggered when ban with specified info is being removed.</p> <p>Original: onExit</p>"},{"location":"defaultEvents/general/onUnban/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>str</code> mac: MAC address of the banned player.</li> <li><code>str</code> ip: IP address of the banned player.</li> <li><code>str</code> serial: serial of the banned player.</li> <li><code>str</code> name: nickname of the banned player.</li> <li><code>int</code> timestamp: timestamp when the ban expires.</li> </ul> </li> </ul>"},{"location":"defaultEvents/general/onUnban/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onUnban')\nasync def onUnban(banInfo):\n    print(f'Player {banInfo['name']} has been unbanned.')\n</code></pre>"},{"location":"defaultEvents/npc/onNpcActionFinished/","title":"<code>event</code> onNpcActionFinished","text":"<p>This event is triggered when NPC action was finished.</p> <p>Original: onNpcActionFinished</p>"},{"location":"defaultEvents/npc/onNpcActionFinished/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> npc_id: the npc identifier.</li> <li><code>int</code> action_type: the action type.</li> <li><code>int</code> action_id: the unique action identifier.</li> <li><code>bool</code> result: the result of finished action.</li> </ul> </li> </ul>"},{"location":"defaultEvents/npc/onNpcActionFinished/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onNpcActionFinished')\nasync def onActionFinished(npc_id, action_type, action_id, result):\n    print(f'NPC {npc_id} finished action {action_type} with the result {result}.')\n</code></pre>"},{"location":"defaultEvents/npc/onNpcActionSent/","title":"<code>event</code> onNpcActionSent","text":"<p>This event is triggered when NPC host is changed. Every remote NPC is hosted by one of spawned players in order to get valid position of NPC.</p> <p>Original: onNpcActionSent</p>"},{"location":"defaultEvents/npc/onNpcActionSent/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> npc_id: the npc identifier.</li> <li><code>int</code> current_id: the action type.</li> <li><code>int</code> previous_id: the unique action identifier.</li> </ul> </li> </ul>"},{"location":"defaultEvents/npc/onNpcActionSent/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onNpcActionSent')\nasync def onActionSent(npc_id, action_type, action_id):\n    print(f'NPC {npc_id} sent action {action_id}.')\n</code></pre>"},{"location":"defaultEvents/npc/onNpcChangeHostPlayer/","title":"<code>event</code> onNpcChangeHostPlayer","text":"<p>This event is triggered when server sends NPC action to streamed players.</p> <p>Original: onNpcChangeHostPlayer</p>"},{"location":"defaultEvents/npc/onNpcChangeHostPlayer/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> npc_id: the id of the remote npc.</li> <li><code>int</code> current_id: the id of the current host, can be -1 if there is no current host.</li> <li><code>int</code> previous_id: the id of the previous host, can be -1 if there was no previous host.</li> </ul> </li> </ul>"},{"location":"defaultEvents/npc/onNpcChangeHostPlayer/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onNpcChangeHostPlayer')\nasync def onChangeHostPlayer(npc_id, previous_id, current_id):\n    print(f'NPC {npc_id} changed host to {current_id}')\n</code></pre>"},{"location":"defaultEvents/npc/onNpcCreated/","title":"<code>event</code> onNpcCreated","text":"<p>This event is triggered when remote NPC is created.</p> <p>Original: onNpcCreated</p>"},{"location":"defaultEvents/npc/onNpcCreated/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> npc_id: the id of the newly created remote npc.</li> </ul> </li> </ul>"},{"location":"defaultEvents/npc/onNpcCreated/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onNpcCreated')\nasync def onNpcCreate(npc_id):\n    print(f'NPC {npc_id} has been created.')\n</code></pre>"},{"location":"defaultEvents/npc/onNpcDestroyed/","title":"<code>event</code> onNpcDestroyed","text":"<p>This event is triggered when remote NPC is created.</p> <p>Original: onNpcDestroyed</p>"},{"location":"defaultEvents/npc/onNpcDestroyed/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> npc_id: the id of the destroyed remote npc.</li> </ul> </li> </ul>"},{"location":"defaultEvents/npc/onNpcDestroyed/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onNpcDestroyed')\nasync def onNpcDestroy(npc_id):\n    print(f'NPC {npc_id} has been destroyed.')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeColor/","title":"<code>event</code> onPlayerChangeColor","text":"<p>This event is triggered when player nickname color was changed for all players.</p> <p>Original: onPlayerChangeColor</p>"},{"location":"defaultEvents/player/onPlayerChangeColor/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player whose nickname color was changed.</li> <li><code>int</code> r: the amount of red in the nickname color <code>(0 - 255)</code>.</li> <li><code>int</code> g: the amount of green in the nickname color <code>(0 - 255)</code>.</li> <li><code>int</code> b: the amount of blue in the nickname color <code>(0 - 255)</code>.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeColor/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeColor')\nasync def onChangeColor(playerid, r, g, b):\n    rgbColor = tuple(r, g, b)\n    hexColor = '#%02x%02x%02x' % rgbColor\n    print(f'Player {playerid} changed his color to {hexColor}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeFocus/","title":"<code>event</code> onPlayerChangeFocus","text":"<p>This event is triggered when player targets another player.</p> <p>Original: onPlayerChangeFocus</p>"},{"location":"defaultEvents/player/onPlayerChangeFocus/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player which changes the focus.</li> <li><code>int</code> oldFocusId: the old playerid targeted by the player. Can be <code>-1</code> if player wasn't targeting other player.</li> <li><code>int</code> newFocusId:  the new playerid targeted by the player. Can be <code>-1</code> if player doesn't target anyone.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeFocus/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeFocus')\nasync def onChangeFocus(playerid, oldFocusId, newFocusId):\n    if newFocusId != -1:\n        print(f'Player {playerid} is looking at {newFocusId}')\n    else\n        print(f'Player {playerid} is looking at... who?')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeHealth/","title":"<code>event</code> onPlayerChangeHealth","text":"<p>This event is triggered when player health changes.</p> <p>Original: onPlayerChangeHealth</p>"},{"location":"defaultEvents/player/onPlayerChangeHealth/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player whose health points gets changed.</li> <li><code>int</code> previous: the previous health points of the player.</li> <li><code>int</code> current:  the new health points of the player.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeHealth/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeHealth')\nasync def onChangeHealth(playerid, previous, current):\n    print(f'Player {playerid} changed health: {previous} -&gt; {current}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeMana/","title":"<code>event</code> onPlayerChangeMana","text":"<p>This event is triggered when player mana changes.</p> <p>Original: onPlayerChangeMana</p>"},{"location":"defaultEvents/player/onPlayerChangeMana/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player mana points gets changed.</li> <li><code>int</code> previous: the previous mana points of the player.</li> <li><code>int</code> current:  the new mana points of the player.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeMana/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeMana')\nasync def onChangeMana(playerid, previous, current):\n    print(f'Player {playerid} changed mana: {previous} -&gt; {current}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeMaxHealth/","title":"<code>event</code> onPlayerChangeMaxHealth","text":"<p>This event is triggered when player maximum health changes.</p> <p>Original: onPlayerChangeMaxHealth</p>"},{"location":"defaultEvents/player/onPlayerChangeMaxHealth/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player whose maxium health points gets changed.</li> <li><code>int</code> previous: the previous maximum health points of the player.</li> <li><code>int</code> current:  the new maximum health points of the player.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeMaxHealth/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeMaxHealth')\nasync def onChangeMaxHealth(playerid, previous, current):\n    print(f'Player {playerid} changed maximum health: {previous} -&gt; {current}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeMaxMana/","title":"<code>event</code> onPlayerChangeMaxMana","text":"<p>This event is triggered when player maximum mana changes.</p> <p>Original: onPlayerChangeMaxMana</p>"},{"location":"defaultEvents/player/onPlayerChangeMaxMana/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player maximum mana points gets changed.</li> <li><code>int</code> previous: the previous maximum mana points of the player.</li> <li><code>int</code> current:  the new maximum mana points of the player.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeMaxMana/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeMaxMana')\nasync def onChangeMaxMana(playerid, previous, current):\n    print(f'Player {playerid} changed maximum mana: {previous} -&gt; {current}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeWeaponMode/","title":"<code>event</code> onPlayerChangeWeaponMode","text":"<p>This event is triggered when player changes the weapon mode.</p> <p>Original: onPlayerChangeWeaponMode</p>"},{"location":"defaultEvents/player/onPlayerChangeWeaponMode/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player which changes the weapon mode.</li> <li><code>int</code> previous: the old weapon mode which was used by the player. For more information see Weapon mode.</li> <li><code>int</code> current:  the new weapon mode in which player is currently using. For more information see Weapon mode.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeWeaponMode/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeWeaponMode')\nasync def onChangeWM(playerid, previous, current):\n    print(f'Player {playerid} changed wm: {previous} -&gt; {current}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerChangeWorld/","title":"<code>event</code> onPlayerChangeWorld","text":"<p>This event can be cancelled</p> <p>This event is triggered when player tries to change his currently played world (ZEN).</p> <p>Original: onPlayerChangeWorld</p>"},{"location":"defaultEvents/player/onPlayerChangeWorld/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who tries to change the played world.</li> <li><code>str</code> world: a filename name of the world.</li> <li><code>str</code> waypoint:  a name of the waypoint that the player will be teleported to.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerChangeWorld/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerChangeWorld')\nasync def onChangeWorld(playerid, world, waypoint):\n    print(f'Player {playerid} teleported to {world} at {waypoint}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerCommand/","title":"<code>event</code> onPlayerCommand","text":"<p>This event is triggered when a player uses command on the chat. Command always begins with forward slash <code>/</code>.</p> <p>Original: onPlayerCommand</p>"},{"location":"defaultEvents/player/onPlayerCommand/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who typed the command.</li> <li><code>str</code> command: used command name on the chat.</li> <li><code>str</code> params:  command parameters divided by space.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerCommand/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerCommand')\nasync def onCommand(playerid, command, params):\n    # Spliting and formating params\n    params = [eval(x) if not x.isalpha() else x for params.split()]\n\n    if command == 'add' and len(params) == 2:\n        print('Sum is: ', params[0] + params[1])            # /add 5 10 -&gt; output: Sum is 15\n</code></pre>"},{"location":"defaultEvents/player/onPlayerDamage/","title":"<code>event</code> onPlayerDamage","text":"<p>This event can be cancelled</p> <p>This event is triggered when player receives damage.</p> <p>Original: onPlayerDamage</p>"},{"location":"defaultEvents/player/onPlayerDamage/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who died.</li> <li><code>int</code> killerid: the id of the killer. If killerid is set to <code>-1</code>, it means that there was no killer. In this particular case damage source can be fall from a tall object or scripts.</li> <li><code>DamageDescription</code> description: a structure containing damage information. For more information see DamageDescription</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerDamage/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerDamage')\nasync def onDamage(playerid, killerid, description):\n    print(f'Ouch! Player {playerid} just received {description.damage} damage.')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerDead/","title":"<code>event</code> onPlayerDead","text":"<p>This event is triggered when one player kills another player.</p> <p>Original: onPlayerDead</p>"},{"location":"defaultEvents/player/onPlayerDead/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who died.</li> <li><code>int</code> killerid: the id of the player who killed other player. If killerid is set to <code>-1</code>, it means that there was no killer.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerDead/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerDead')\nasync def onDead(playerid, killerid):\n    print(playerid, 'killed by', killerid)\n</code></pre>"},{"location":"defaultEvents/player/onPlayerDisconnect/","title":"<code>event</code> onPlayerDisconnect","text":"<p>This event is triggered when a player gets disconnected with the server.</p> <p>Original: onPlayerDisconnect</p>"},{"location":"defaultEvents/player/onPlayerDisconnect/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: he id of the player who disconnected from the server.</li> <li><code>int</code> reason: the reason why player got disconnected. For more information see Network.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerDisconnect/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerDisconnect')\nasync def onDC(playerid, reason):\n    print(f'Player {playerid} has left from the server')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerDropItem/","title":"<code>event</code> onPlayerDropItem","text":"<p>This event can be cancelled</p> <p>This event is triggered when player drops an item from his inventory to the ground.</p> <p>Original: onPlayerDropItem</p>"},{"location":"defaultEvents/player/onPlayerDropItem/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who tries to drop the item on the ground.</li> <li><code>ItemGround</code> itemGround: the ground item object which represents the dropped item by the player.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerDropItem/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerDropItem')\nasync def onDropItem(playerid, itemGround):\n    print(f'Player {playerid} dropped {itemGround.instance} x{itemGround.amount}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEnterWorld/","title":"<code>event</code> onPlayerEnterWorld","text":"<p>This event is triggered when player entered the world (ZEN) and was successfully spawned in it.</p> <p>Original: onPlayerEnterWorld</p>"},{"location":"defaultEvents/player/onPlayerEnterWorld/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who entered the world.</li> <li><code>str</code> world: an filename name of the world.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEnterWorld/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEnterWorld')\nasync def onEnterWorld(playerid, world):\n    print(f'Player {playerid} entered world {world}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipAmulet/","title":"<code>event</code> onPlayerEquipAmulet","text":"<p>This event is triggered when player equips or unequips amulet. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipAmulet</p>"},{"location":"defaultEvents/player/onPlayerEquipAmulet/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips a amulet.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipAmulet/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipAmulet')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipArmor/","title":"<code>event</code> onPlayerEquipAmulet","text":"<p>This event is triggered when player equips or unequips armor. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipArmor</p>"},{"location":"defaultEvents/player/onPlayerEquipArmor/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips an armor.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipArmor/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipArmor')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipBelt/","title":"<code>event</code> onPlayerEquipBelt","text":"<p>This event is triggered when player equips or unequips belt. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipBelt</p>"},{"location":"defaultEvents/player/onPlayerEquipBelt/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips a belt.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipBelt/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipBelt')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipHandItem/","title":"<code>event</code> onPlayerEquipHandItem","text":"<p>This event is triggered when game adds item to player hand, e.g: when player opens or consumes any item. When item is removed from hand, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipHandItem</p>"},{"location":"defaultEvents/player/onPlayerEquipHandItem/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who gets an item to his hand.</li> <li><code>int</code> hand: the id of the hand in which player holds item. For more information see Hand.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipHandItem/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipHandItem')\nasync def onEquip(playerid, hand, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipHelmet/","title":"<code>event</code> onPlayerEquipHelmet","text":"<p>This event is triggered when player equips or unequips helmet. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipHelmet</p>"},{"location":"defaultEvents/player/onPlayerEquipHelmet/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips a helmet.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipHelmet/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipHelmet')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipMeleeWeapon/","title":"<code>event</code> onPlayerEquipMeleeWeapon","text":"<p>This event is triggered when player equips or unequips melee weapon. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipMeleeWeapon</p>"},{"location":"defaultEvents/player/onPlayerEquipMeleeWeapon/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips an melee weapon.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipMeleeWeapon/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipMeleeWeapon')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipRangedWeapon/","title":"<code>event</code> onPlayerEquipRangedWeapon","text":"<p>This event is triggered when player equips or unequips ranged weapon. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipRangedWeapon</p>"},{"location":"defaultEvents/player/onPlayerEquipRangedWeapon/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips an ranged weapon.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipRangedWeapon/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipRangedWeapon')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipRing/","title":"<code>event</code> onPlayerEquipRing","text":"<p>This event is triggered when player equips or unequips ring. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipRing</p>"},{"location":"defaultEvents/player/onPlayerEquipRing/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips a ring.</li> <li><code>int</code> hand: the hand id that the player is putting the ring on. For more information see Hand.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipRing/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipRing')\nasync def onEquip(playerid, hand, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipShield/","title":"<code>event</code> onPlayerEquipShield","text":"<p>This event is triggered when player equips or unequips shield. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipShield</p>"},{"location":"defaultEvents/player/onPlayerEquipShield/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips a shield.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipShield/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerEquipShield')\nasync def onEquip(playerid, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerEquipSpell/","title":"<code>event</code> onPlayerEquipSpell","text":"<p>This event is triggered when player equips or unequips scroll or rune. When item is unequiped, empty <code>str</code> is returned instead.</p> <p>Original: onPlayerEquipSpell</p>"},{"location":"defaultEvents/player/onPlayerEquipSpell/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who equips a spell.</li> <li><code>int</code> slotId: the slot id that the player puts the spell on in range <code>&lt;0, 6&gt;</code>.</li> <li><code>str</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerEquipSpell/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerSpell')\nasync def onEquip(playerid, slotId, instance):\n    print(f'Player {playerid} equipped {instance}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerJoin/","title":"<code>event</code> onPlayerJoin","text":"<p>This event is triggered when a player successfully joined the server.</p> <p>Original: onPlayerJoin</p>"},{"location":"defaultEvents/player/onPlayerJoin/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who joined the server.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerJoin/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerJoin')\nasync def onJoin(playerid):\n    print(pyg2o.getPlayerName(playerid), ' joined to the server.')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerMessage/","title":"<code>event</code> onPlayerMessage","text":"<p>This event is triggered when a player types the message on the chat.</p> <p>Original: onPlayerMessage</p>"},{"location":"defaultEvents/player/onPlayerMessage/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who typed the message.</li> <li><code>str</code> message: the message typed by the player.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerMessage/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerMessage')\nasync def onMessage(playerid, message):\n    print(pyg2o.getPlayerName(playerid), ' says ', message)\n</code></pre>"},{"location":"defaultEvents/player/onPlayerMobInteract/","title":"<code>event</code> onPlayerMobInteract","text":"<p>This event is triggered when player interacts with any kind of mob object in the world. In Gothic, mobs are special vobs on the map, that hero can interact with. For example bed, door, chest etc.</p> <p>Original: onPlayerMobInteract</p>"},{"location":"defaultEvents/player/onPlayerMobInteract/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: represents previous state of mob. If value is <code>1</code>, then mob was used, in any other case value is <code>0</code>.</li> <li><code>int</code> from: represents current state of mob. If value is <code>1</code>, then mob is used, in any other case value is <code>0</code>.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerMobInteract/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerMobInteract')\nasync def onMobInteract(playerid, from, to):\n    if to == 1:\n        print(playerid, 'started interaction with the MOB')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerRespawn/","title":"<code>event</code> onPlayerRespawn","text":"<p>This event is triggered when a player respawns after death.</p> <p>Original: onPlayerRespawn</p>"},{"location":"defaultEvents/player/onPlayerRespawn/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who respawned after death.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerRespawn/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerRespawn')\nasync def onRespawn(playerid):\n    print(playerid, 'respawned.')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerShoot/","title":"<code>event</code> onPlayerShoot","text":"<p>This event is triggered when player shoot using ranged weapon.</p> <p>Original: onPlayerShoot</p>"},{"location":"defaultEvents/player/onPlayerShoot/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who just shot.</li> <li><code>str | null</code> munition: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerShoot/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerShoot')\nasync def onShoot(playerid, munition):\n    print(playerid, 'made a shot.')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerSpellCast/","title":"<code>event</code> onPlayerSpellCast","text":"<p>This event can be cancelled</p> <p>Note</p> <p>Right now transformation and summon spells are not supported, despite this event will be triggered for them. Cancelling this event willl prevent this action to be synced to other players.</p> <p>This event is triggered when player is casting some spell.</p> <p>Original: onPlayerSpellCast</p>"},{"location":"defaultEvents/player/onPlayerSpellCast/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who casts the spell.</li> <li><code>str | null</code> instance: the item instance from Daedalus scripts.</li> <li><code>int</code> spellLevel: the level of charged spell.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerSpellCast/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerSpellCast')\nasync def onSpellCast(playerid, instance, spellLevel):\n    print(playerid, 'casted a spell', instance)\n</code></pre>"},{"location":"defaultEvents/player/onPlayerSpellSetup/","title":"<code>event</code> onPlayerSpellSetup","text":"<p>This event is triggered when player prepares the spell.</p> <p>Original: onPlayerSpellSetup</p>"},{"location":"defaultEvents/player/onPlayerSpellSetup/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who prepares the spell.</li> <li><code>str | null</code> instance: the item instance from Daedalus scripts.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerSpellSetup/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerSpellSetup')\nasync def onSpellSetup(playerid, instance):\n    print(playerid, 'setuped a spell', instance)\n</code></pre>"},{"location":"defaultEvents/player/onPlayerTakeItem/","title":"<code>event</code> onPlayerTakeItem","text":"<p>This event can be cancelled</p> <p>Note</p> <p>Even if this event is triggered it doesn't mean, that player will get item to his inventory. It only means, that the player tried to get the item from the ground. Server is the last decide if the item can be taken from the ground. Canceling this event will prevent the item to be taken from the ground.</p> <p>This event is triggered when player takes an item from the ground.</p> <p>Original: onPlayerTakeItem</p>"},{"location":"defaultEvents/player/onPlayerTakeItem/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who tries to take the ground item.</li> <li><code>ItemGround</code> itemGround: the ground item object which player tried to to take.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerTakeItem/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerTakeItem')\nasync def onTakeItem(playerid, itemGround):\n    print(f'Player {playerid} took {itemGround.instance} x{itemGround.amount}')\n</code></pre>"},{"location":"defaultEvents/player/onPlayerTeleport/","title":"<code>event</code> onPlayerTeleport","text":"<p>This event is triggered when player gets teleported by the game to the specified vob.</p> <p>Original: onPlayerTeleport</p>"},{"location":"defaultEvents/player/onPlayerTeleport/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who gets teleported by the game.</li> <li><code>str</code> vobName: represents the name of the vob that player gets teleported to.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerTeleport/#usage","title":"Usage","text":"<pre><code>import pyg2o as g2o\n\n@g2o.event('onPlayerTeleport')\nasync def onTeleport(playerid, vobName):\n    print(playerid, 'teleported to', vobName)\n</code></pre>"},{"location":"defaultEvents/player/onPlayerToggleFaceAni/","title":"<code>event</code> onPlayerTeleport","text":"<p>This event is triggered when player face animation is toggled (played or stopped), due to eating or other activities.</p> <p>Original: onPlayerToggleFaceAni</p>"},{"location":"defaultEvents/player/onPlayerToggleFaceAni/#parameters","title":"Parameters","text":"<ul> <li><code>dict</code> kwargs:<ul> <li><code>int</code> playerid: the id of the player who gets teleported by the game.</li> <li><code>str</code> aniName: the face animation name.</li> <li><code>bool</code> toggle: <code>true</code> when player is started playing face animation, otherwise <code>false</code>.</li> </ul> </li> </ul>"},{"location":"defaultEvents/player/onPlayerToggleFaceAni/#usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onPlayerToggleFaceAni')\nasync def onToggleFA(playerid, aniName, toggle):\n    if toggle:\n        print(playerid, 'started face ani', aniName)\n</code></pre>"},{"location":"functions/chat/sendMessageToAll/","title":"<code>function</code> sendMessageToAll","text":"<p>This function will send a chat message to every connected player. Sending a message triggers client side event onPlayerMessage with playerid set as <code>-1</code>. Original: sendMessageToAll</p>"},{"location":"functions/chat/sendMessageToAll/#src.pyg2o.functions.chat.sendMessageToAll--declaration","title":"Declaration","text":"<pre><code>async def sendMessageToAll(r : int, g : int, b : int, text : str)\n</code></pre>"},{"location":"functions/chat/sendMessageToAll/#src.pyg2o.functions.chat.sendMessageToAll--parameters","title":"Parameters","text":"<ul> <li><code>int</code> r: the red color component in RGB model.</li> <li><code>int</code> g: the green color component in RGB model.</li> <li><code>int</code> b: the blue color component in RGB model.</li> <li><code>str</code> text: that will be send.</li> </ul> Source code in <code>src/pyg2o/functions/chat.py</code> <pre><code>async def sendMessageToAll(r : int, g : int, b : int, text : str):\n    \"\"\"\n    This function will send a chat message to every connected player.\n    Sending a message triggers client side event [onPlayerMessage](../../defaultEvents/player/onPlayerMessage.md) with playerid set as `-1`.\n    Original: [sendMessageToAll](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/chat/sendMessageToAll/)\n\n    ## Declaration\n    ```python\n    async def sendMessageToAll(r : int, g : int, b : int, text : str)\n    ```\n\n    ## Parameters\n    * `int` **r**: the red color component in RGB model.\n    * `int` **g**: the green color component in RGB model.\n    * `int` **b**: the blue color component in RGB model.\n    * `str` **text**: that will be send.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/chat/sendMessageToPlayer/","title":"<code>function</code> sendMessageToPlayer","text":"<p>This function will send a chat message to specific player. Sending a message triggers client side event onPlayerMessage with playerid set as <code>-1</code>. Original: sendMessageToPlayer</p>"},{"location":"functions/chat/sendMessageToPlayer/#src.pyg2o.functions.chat.sendMessageToPlayer--declaration","title":"Declaration","text":"<pre><code>async def sendMessageToPlayer(playerid : int, r : int, g : int, b : int, text : str)\n</code></pre>"},{"location":"functions/chat/sendMessageToPlayer/#src.pyg2o.functions.chat.sendMessageToPlayer--parameters","title":"Parameters","text":"<ul> <li><code>int</code> playerid: the id of the player which will receive a message.</li> <li><code>int</code> r: the red color component in RGB model.</li> <li><code>int</code> g: the green color component in RGB model.</li> <li><code>int</code> b: the blue color component in RGB model.</li> <li><code>str</code> text: that will be send.</li> </ul> Source code in <code>src/pyg2o/functions/chat.py</code> <pre><code>async def sendMessageToPlayer(playerid : int, r : int, g : int, b : int, text : str):\n    \"\"\"\n    This function will send a chat message to specific player.\n    Sending a message triggers client side event [onPlayerMessage](../../defaultEvents/player/onPlayerMessage.md) with playerid set as `-1`.\n    Original: [sendMessageToPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/chat/sendMessageToPlayer/)\n\n    ## Declaration\n    ```python\n    async def sendMessageToPlayer(playerid : int, r : int, g : int, b : int, text : str)\n    ```\n\n    ## Parameters\n    * `int` **playerid**: the id of the player which will receive a message.\n    * `int` **r**: the red color component in RGB model.\n    * `int` **g**: the green color component in RGB model.\n    * `int` **b**: the blue color component in RGB model.\n    * `str` **text**: that will be send.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/chat/sendPlayerMessageToAll/","title":"<code>function</code> sendPlayerMessageToAll","text":"<p>This function will send a chat message from one player to every player. Sending a message Sending a message triggers client side event onPlayerMessage with playerid set as senderid. Original: sendPlayerMessageToAll</p>"},{"location":"functions/chat/sendPlayerMessageToAll/#src.pyg2o.functions.chat.sendPlayerMessageToAll--declaration","title":"Declaration","text":"<pre><code>async def sendPlayerMessageToAll(senderid : int, r : int, g : int, b : int, text : str)\n</code></pre>"},{"location":"functions/chat/sendPlayerMessageToAll/#src.pyg2o.functions.chat.sendPlayerMessageToAll--parameters","title":"Parameters","text":"<ul> <li><code>int</code> senderid: the id of the player which will send a message.</li> <li><code>int</code> r: the red color component in RGB model.</li> <li><code>int</code> g: the green color component in RGB model.</li> <li><code>int</code> b: the blue color component in RGB model.</li> <li><code>str</code> text: that will be send.</li> </ul> Source code in <code>src/pyg2o/functions/chat.py</code> <pre><code>async def sendPlayerMessageToAll(senderid : int, r : int, g : int, b : int, text : str):\n    \"\"\"\n    This function will send a chat message from one player to every player. Sending a message\n    Sending a message triggers client side event [onPlayerMessage](../../defaultEvents/player/onPlayerMessage.md) with playerid set as **senderid**.\n    Original: [sendPlayerMessageToAll](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/chat/sendPlayerMessageToAll/)\n\n    ## Declaration\n    ```python\n    async def sendPlayerMessageToAll(senderid : int, r : int, g : int, b : int, text : str)\n    ```\n\n    ## Parameters\n    * `int` **senderid**: the id of the player which will send a message.\n    * `int` **r**: the red color component in RGB model.\n    * `int` **g**: the green color component in RGB model.\n    * `int` **b**: the blue color component in RGB model.\n    * `str` **text**: that will be send.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/chat/sendPlayerMessageToPlayer/","title":"<code>function</code> sendPlayerMessageToPlayer","text":"<p>This function will send a chat message from one player to another player. Sending a message triggers client side event onPlayerMessage with playerid set as senderid. Original: sendPlayerMessageToPlayer</p>"},{"location":"functions/chat/sendPlayerMessageToPlayer/#src.pyg2o.functions.chat.sendPlayerMessageToPlayer--declaration","title":"Declaration","text":"<pre><code>async def sendPlayerMessageToPlayer(senderid : int, receiverid : int, r : int, g : int, b : int, text : str)\n</code></pre>"},{"location":"functions/chat/sendPlayerMessageToPlayer/#src.pyg2o.functions.chat.sendPlayerMessageToPlayer--parameters","title":"Parameters","text":"<ul> <li><code>int</code> senderid: the id of the player which will send a message.</li> <li><code>int</code> receiverid: the id of the player which will receive a message.</li> <li><code>int</code> r: the red color component in RGB model.</li> <li><code>int</code> g: the green color component in RGB model.</li> <li><code>int</code> b: the blue color component in RGB model.</li> <li><code>str</code> text: that will be send.</li> </ul> Source code in <code>src/pyg2o/functions/chat.py</code> <pre><code>async def sendPlayerMessageToPlayer(senderid : int, receiverid : int, r : int, g : int, b : int, text : str):\n    \"\"\"\n    This function will send a chat message from one player to another player.\n    Sending a message triggers client side event [onPlayerMessage](../../defaultEvents/player/onPlayerMessage.md) with playerid set as **senderid**.\n    Original: [sendPlayerMessageToPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/chat/sendPlayerMessageToPlayer/)\n\n    ## Declaration\n    ```python\n    async def sendPlayerMessageToPlayer(senderid : int, receiverid : int, r : int, g : int, b : int, text : str)\n    ```\n\n    ## Parameters\n    * `int` **senderid**: the id of the player which will send a message.\n    * `int` **receiverid**: the id of the player which will receive a message.\n    * `int` **r**: the red color component in RGB model.\n    * `int` **g**: the green color component in RGB model.\n    * `int` **b**: the blue color component in RGB model.\n    * `str` **text**: that will be send.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/event/addEvent/","title":"<code>function</code> addEvent","text":"<p>This function will register a new event with specified name. Events can be used to notify function(s) when something will happen, like player joins the server, etc. Original: addEvent</p>"},{"location":"functions/event/addEvent/#src.pyg2o.functions.event.addEvent--declaration","title":"Declaration","text":"<pre><code>def addEvent(name)\n</code></pre>"},{"location":"functions/event/addEvent/#src.pyg2o.functions.event.addEvent--parameters","title":"Parameters","text":"<ul> <li><code>str</code> name: the name of the event</li> </ul>"},{"location":"functions/event/addEvent/#src.pyg2o.functions.event.addEvent--usage","title":"Usage","text":"<pre><code>import g2o\n\ng2o.addEvent('testEvt')\n</code></pre> Source code in <code>src/pyg2o/functions/event.py</code> <pre><code>def addEvent(name : str):\n    \"\"\"\n    This function will register a new event with specified name.\n    Events can be used to notify function(s) when something will happen, like player joins the server, etc.\n    Original: [addEvent](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/event/addEvent/)\n\n    ## Declaration\n    ```python\n    def addEvent(name)\n    ```\n\n    ## Parameters\n    * `str` **name**: the name of the event\n\n    ## Usage\n    ```python\n    import g2o\n\n    g2o.addEvent('testEvt')\n    ```\n    \"\"\"\n    if name not in eventList:\n        eventList[name] = []\n</code></pre>"},{"location":"functions/event/callEvent/","title":"<code>function</code> callEvent","text":"<p>This function will notify (call) every handler bound to specified event. Original: callEvent</p>"},{"location":"functions/event/callEvent/#src.pyg2o.functions.event.callEvent--declaration","title":"Declaration","text":"<pre><code>def callEvent(evtName : str, **kwargs : list)\n</code></pre>"},{"location":"functions/event/callEvent/#src.pyg2o.functions.event.callEvent--parameters","title":"Parameters","text":"<ul> <li><code>str</code> name: the name of the event</li> <li><code>**dict</code> kwargs: the variable number of arguments.</li> </ul>"},{"location":"functions/event/callEvent/#src.pyg2o.functions.event.callEvent--usage","title":"Usage","text":"<pre><code>import g2o\n\ng2o.addEvent('testEvt')\n\n@g2o.event('testEvt')\ndef onTestEvent(**kwargs):\n    print(f'{kwargs['name']} called my beautiful test event')\n\ng2o.callEvent('testEvt', name = 'Diego')\n</code></pre> Source code in <code>src/pyg2o/functions/event.py</code> <pre><code>async def callEvent(evtName : str, **kwargs : list):\n    \"\"\"\n    This function will notify (call) every handler bound to specified event.\n    Original: [callEvent](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/event/callEvent/)\n\n    ## Declaration\n    ```python\n    def callEvent(evtName : str, **kwargs : list)\n    ```\n\n    ## Parameters\n    * `str` **name**: the name of the event\n    * `**dict` **kwargs**: the variable number of arguments.\n\n    ## Usage\n    ```python\n    import g2o\n\n    g2o.addEvent('testEvt')\n\n    @g2o.event('testEvt')\n    def onTestEvent(**kwargs):\n        print(f'{kwargs['name']} called my beautiful test event')\n\n    g2o.callEvent('testEvt', name = 'Diego')\n    ```\n    \"\"\"\n\n    if evtName in eventList and evtName not in disabledEventList:\n        for event in eventList[evtName]:\n\n            event['function'].eventName = evtName\n            result = await event['function'](**kwargs)\n</code></pre>"},{"location":"functions/event/event/","title":"<code>function</code> event","text":"Source code in <code>src/pyg2o/functions/event.py</code> <pre><code>def event(event_name: str, priority: int = 9999) -&gt; None:\n    def inlineEvt(func):\n        if event_name not in eventList:\n            addEvent(event_name)\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        eventList[event_name].append({'function': wrapper, 'priority': priority})\n        eventList[event_name].sort(key = lambda x: x['priority'])\n        return wrapper\n    return inlineEvt\n</code></pre>"},{"location":"functions/event/removeEvent/","title":"<code>function</code> removeEvent","text":"<p>Warning</p> <p>Removing an event also cause all event handlers to unregister.</p> <p>This function will unregister an event with specified name. Original: removeEvent</p>"},{"location":"functions/event/removeEvent/#src.pyg2o.functions.event.removeEvent--declaration","title":"Declaration","text":"<pre><code>def removeEvent(name : str)\n</code></pre>"},{"location":"functions/event/removeEvent/#src.pyg2o.functions.event.removeEvent--parameters","title":"Parameters","text":"<ul> <li><code>str</code> name: the name of the event</li> </ul>"},{"location":"functions/event/removeEvent/#src.pyg2o.functions.event.removeEvent--usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onTime')\ndef onTimeEvt(**kwargs):\n    print('Calling only once')\n    g2o.removeEvent('onTime')\n</code></pre> Source code in <code>src/pyg2o/functions/event.py</code> <pre><code>def removeEvent(name : str):\n    '''\n    !!! warning\n        Removing an event also cause all event handlers to unregister.\n    This function will unregister an event with specified name.\n    Original: [removeEvent](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/event/removeEvent/)\n\n    ## Declaration\n    ```python\n    def removeEvent(name : str)\n    ```\n\n    ## Parameters\n    * `str` **name**: the name of the event\n\n    ## Usage\n    ```python\n    import g2o\n\n    @g2o.event('onTime')\n    def onTimeEvt(**kwargs):\n        print('Calling only once')\n        g2o.removeEvent('onTime')\n    ```\n    '''\n    if name in eventList:\n        eventList.pop(name)\n</code></pre>"},{"location":"functions/event/removeEventHandler/","title":"<code>function</code> removeEventHandler","text":"<p>This function will unbind function from specified event. Original: removeEventHandler</p>"},{"location":"functions/event/removeEventHandler/#src.pyg2o.functions.event.removeEventHandler--declaration","title":"Declaration","text":"<pre><code>def removeEventHandler(name : str, func : object)\n</code></pre>"},{"location":"functions/event/removeEventHandler/#src.pyg2o.functions.event.removeEventHandler--parameters","title":"Parameters","text":"<ul> <li><code>str</code> name: the name of the event</li> <li><code>object</code> func: the reference to a function which is currently bound to specified event.</li> </ul>"},{"location":"functions/event/removeEventHandler/#src.pyg2o.functions.event.removeEventHandler--usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onTime')\ndef onTimeEvt(**kwargs):\n    print('Calling only once')\n    g2o.removeEventHandler('onTime', onTimeEvt)\n</code></pre> Source code in <code>src/pyg2o/functions/event.py</code> <pre><code>def removeEventHandler(name : str, func : object):\n    \"\"\"\n    This function will unbind function from specified event.\n    Original: [removeEventHandler](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/event/removeEventHandler/)\n\n    ## Declaration\n    ```python\n    def removeEventHandler(name : str, func : object)\n    ```\n\n    ## Parameters\n    * `str` **name**: the name of the event\n    * `object` **func**: the reference to a function which is currently bound to specified event.\n\n    ## Usage\n    ```python\n    import g2o\n\n    @g2o.event('onTime')\n    def onTimeEvt(**kwargs):\n        print('Calling only once')\n        g2o.removeEventHandler('onTime', onTimeEvt)\n    ```\n    \"\"\"\n    if not name in eventList:\n        pass\n\n    for index, item in enumerate(eventList[name]):\n        if item['function'] == func:\n            del eventList[name][index]\n</code></pre>"},{"location":"functions/event/toggleEvent/","title":"<code>function</code> toggleEvent","text":"<p>Note</p> <p>By default every event is toggled <code>on</code> (enabled).</p> <p>This function will toggle event (enable or disable it globally). By toggling event off, you can completely disable certain event from calling it's handlers. Original: toggleEvent</p>"},{"location":"functions/event/toggleEvent/#src.pyg2o.functions.event.toggleEvent--declaration","title":"Declaration","text":"<pre><code>def toggleEvent(name : str, toggle : bool)\n</code></pre>"},{"location":"functions/event/toggleEvent/#src.pyg2o.functions.event.toggleEvent--parameters","title":"Parameters","text":"<ul> <li><code>str</code> name: the name of the event</li> <li><code>bool</code> toggle: <code>false</code> if you want to disable the event, otherwise true.</li> </ul>"},{"location":"functions/event/toggleEvent/#src.pyg2o.functions.event.toggleEvent--usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onTime')\ndef onTimeEvt(**kwargs):\n    print('Calling only once')\n    g2o.toggleEvent('onTime', false)\n</code></pre> Source code in <code>src/pyg2o/functions/event.py</code> <pre><code>def toggleEvent(name : str, toggle : bool):\n    '''\n    !!! note\n        By default every event is toggled `on` (enabled).\n\n    This function will toggle event (enable or disable it globally). By toggling event off, you can completely disable certain event from calling it's handlers.\n    Original: [toggleEvent](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/event/toggleEvent/)\n\n    ## Declaration\n    ```python\n    def toggleEvent(name : str, toggle : bool)\n    ```\n\n    ## Parameters\n    * `str` **name**: the name of the event\n    * `bool` **toggle**: `false` if you want to disable the event, otherwise true.\n\n    ## Usage\n    ```python\n    import g2o\n\n    @g2o.event('onTime')\n    def onTimeEvt(**kwargs):\n        print('Calling only once')\n        g2o.toggleEvent('onTime', false)\n    ```\n    '''\n    if not toggle and name not in disabledEventList:\n        disabledEventList.append(name)\n    elif toggle and name in disabledEventList:\n        disabledEventList.remove(name)\n</code></pre>"},{"location":"functions/game/exit/","title":"<code>function</code> exit","text":"<p>This function will close the server with specified exit code. Original: exit</p>"},{"location":"functions/game/exit/#src.pyg2o.functions.game.exit--declaration","title":"Declaration","text":"<pre><code>async def exit(exitCode : int = 0)\n</code></pre>"},{"location":"functions/game/exit/#src.pyg2o.functions.game.exit--parameters","title":"Parameters","text":"<ul> <li><code>int</code> exitCode: exit status for g2o server.</li> </ul> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def exit(exitCode : int = 0):\n    \"\"\"\n    This function will close the server with specified exit code.\n    Original: [exit](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/exit/)\n\n    ## Declaration\n    ```python\n    async def exit(exitCode : int = 0)\n    ```\n    ## Parameters\n    * `int` **exitCode**: exit status for g2o server.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getDayLength/","title":"<code>function</code> getDayLength","text":"<p>The function is used to get the day length in miliseconds. Original: getDayLength</p>"},{"location":"functions/game/getDayLength/#src.pyg2o.functions.game.getDayLength--declaration","title":"Declaration","text":"<pre><code>async def getDayLength() -&gt; float\n</code></pre>"},{"location":"functions/game/getDayLength/#src.pyg2o.functions.game.getDayLength--returns","title":"Returns","text":"<p><code>float</code>: the current day length in miliseconds.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getDayLength() -&gt; float:\n    \"\"\"\n    The function is used to get the day length in miliseconds.\n    Original: [getDayLength](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/getDayLength/)\n\n    ## Declaration\n    ```python\n    async def getDayLength() -&gt; float\n    ```\n    ## Returns\n    `float`: the current day length in miliseconds.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getHostname/","title":"<code>function</code> getHostname","text":"<p>This function will get the hostname of the server. Original: getHostname</p>"},{"location":"functions/game/getHostname/#src.pyg2o.functions.game.getHostname--declaration","title":"Declaration","text":"<pre><code>async def getHostname() -&gt; str\n</code></pre>"},{"location":"functions/game/getHostname/#src.pyg2o.functions.game.getHostname--returns","title":"Returns","text":"<p><code>str</code>: Server hostname.</p>"},{"location":"functions/game/getHostname/#src.pyg2o.functions.game.getHostname--usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onInit')\ndef evtInit(**kwargs):\n    print('Server hostname:', g2o.getHostname())\n</code></pre> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getHostname() -&gt; str:\n    \"\"\"\n    This function will get the hostname of the server.\n    Original: [getHostname](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/game/getHostname/)\n\n    ## Declaration\n    ```python\n    async def getHostname() -&gt; str\n    ```\n    ## Returns\n    `str`: Server hostname.\n\n    ## Usage\n    ```python\n    import g2o\n\n    @g2o.event('onInit')\n    def evtInit(**kwargs):\n        print('Server hostname:', g2o.getHostname())\n    ```\n    \"\"\"\n\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getMaxSlots/","title":"<code>function</code> getMaxSlots","text":"<p>This function will get the max number of slots available on the server. Original: getMaxSlots</p>"},{"location":"functions/game/getMaxSlots/#src.pyg2o.functions.game.getMaxSlots--declaration","title":"Declaration","text":"<pre><code>async def getMaxSlots() -&gt; int\n</code></pre>"},{"location":"functions/game/getMaxSlots/#src.pyg2o.functions.game.getMaxSlots--returns","title":"Returns","text":"<p><code>int</code>: Max slots number on the server.</p>"},{"location":"functions/game/getMaxSlots/#src.pyg2o.functions.game.getMaxSlots--usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onInit')\ndef evtInit(**kwargs):\n    print('Server max slots:', g2o.getMaxSlots())\n</code></pre> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getMaxSlots() -&gt; int:\n    \"\"\"\n    This function will get the max number of slots available on the server.\n    Original: [getMaxSlots](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/game/getMaxSlots/)\n\n    ## Declaration\n    ```python\n    async def getMaxSlots() -&gt; int\n    ```\n    ## Returns\n    `int`: Max slots number on the server.\n\n    ## Usage\n    ```python\n    import g2o\n\n    @g2o.event('onInit')\n    def evtInit(**kwargs):\n        print('Server max slots:', g2o.getMaxSlots())\n    ```\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getPlayersCount/","title":"<code>function</code> getPlayersCount","text":"<p>This function will get the max number of slots available on the server. Original: getPlayersCount</p>"},{"location":"functions/game/getPlayersCount/#src.pyg2o.functions.game.getPlayersCount--declaration","title":"Declaration","text":"<pre><code>async def getPlayersCount() -&gt; int\n</code></pre>"},{"location":"functions/game/getPlayersCount/#src.pyg2o.functions.game.getPlayersCount--returns","title":"Returns","text":"<p><code>int</code>: Number of players on the server.</p>"},{"location":"functions/game/getPlayersCount/#src.pyg2o.functions.game.getPlayersCount--usage","title":"Usage","text":"<pre><code>import g2o\n\n@g2o.event('onInit')\ndef evtInit(**kwargs):\n    print('Players online:', g2o.getPlayersCount())\n</code></pre> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getPlayersCount() -&gt; int:\n    \"\"\"\n    This function will get the max number of slots available on the server.\n    Original: [getPlayersCount](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/shared-functions/game/getPlayersCount/)\n\n    ## Declaration\n    ```python\n    async def getPlayersCount() -&gt; int\n    ```\n    ## Returns\n    `int`: Number of players on the server.\n\n    ## Usage\n    ```python\n    import g2o\n\n    @g2o.event('onInit')\n    def evtInit(**kwargs):\n        print('Players online:', g2o.getPlayersCount())\n    ```\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getServerDescription/","title":"<code>function</code> getServerDescription","text":"<p>This function will get the description of the server. Original: getServerDescription</p>"},{"location":"functions/game/getServerDescription/#src.pyg2o.functions.game.getServerDescription--declaration","title":"Declaration","text":"<pre><code>async def getServerDescription() -&gt; str\n</code></pre>"},{"location":"functions/game/getServerDescription/#src.pyg2o.functions.game.getServerDescription--returns","title":"Returns","text":"<p><code>str</code>: Server description.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getServerDescription() -&gt; str:\n    \"\"\"\n    This function will get the description of the server.\n    Original: [getServerDescription](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/getServerDescription/)\n\n    ## Declaration\n    ```python\n    async def getServerDescription() -&gt; str\n    ```\n    ## Returns\n    `str`: Server description.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getServerWorld/","title":"<code>function</code> getServerWorld","text":"<p>The function is used to get the path of the default world on the server. Original: getServerWorld</p>"},{"location":"functions/game/getServerWorld/#src.pyg2o.functions.game.getServerWorld--declaration","title":"Declaration","text":"<pre><code>async def getServerWorld() -&gt; str\n</code></pre>"},{"location":"functions/game/getServerWorld/#src.pyg2o.functions.game.getServerWorld--returns","title":"Returns","text":"<p><code>str</code>: The world path name.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getServerWorld() -&gt; str:\n    \"\"\"\n    The function is used to get the path of the default world on the server.\n    Original: [getServerWorld](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/getServerWorld/)\n\n    ## Declaration\n    ```python\n    async def getServerWorld() -&gt; str\n    ```\n    ## Returns\n    `str`: The world path name.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/getTime/","title":"<code>function</code> getTime","text":"<p>The function is used to get the path of the default world on the server. Original: getTime</p>"},{"location":"functions/game/getTime/#src.pyg2o.functions.game.getTime--declaration","title":"Declaration","text":"<pre><code>async def getTime() -&gt; tuple\n</code></pre>"},{"location":"functions/game/getTime/#src.pyg2o.functions.game.getTime--returns","title":"Returns","text":"<p><code>tuple (day, hour, min)</code>: The current time in the game.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def getTime() -&gt; tuple:\n    \"\"\"\n    The function is used to get the path of the default world on the server.\n    Original: [getTime](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/getTime/)\n\n    ## Declaration\n    ```python\n    async def getTime() -&gt; tuple\n    ```\n    ## Returns\n    `tuple (day, hour, min)`: The current time in the game.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['day'], result['hour'], result['min'])\n</code></pre>"},{"location":"functions/game/serverLog/","title":"<code>function</code> serverLog","text":"<p>This function will log the text into server.log file. Original: serverLog</p>"},{"location":"functions/game/serverLog/#src.pyg2o.functions.game.serverLog--declaration","title":"Declaration","text":"<pre><code>async def serverLog(text : str)\n</code></pre>"},{"location":"functions/game/serverLog/#src.pyg2o.functions.game.serverLog--parameters","title":"Parameters","text":"<p><code>str</code> text: the text message that you want to append to server.log file.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def serverLog(text : str):\n    \"\"\"\n    This function will log the text into server.log file.\n    Original: [serverLog](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/serverLog/)\n\n    ## Declaration\n    ```python\n    async def serverLog(text : str)\n    ```\n    ## Parameters\n    `str` **text**: the text message that you want to append to server.log file.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/setDayLength/","title":"<code>function</code> setDayLength","text":"<p>Note</p> <p>Day length can't be smaller than 10 000 miliseconds.</p> <p>This function will set the day length in miliseconds. Original: setDayLength</p>"},{"location":"functions/game/setDayLength/#src.pyg2o.functions.game.setDayLength--declaration","title":"Declaration","text":"<pre><code>async def setDayLength(miliseconds : float)\n</code></pre>"},{"location":"functions/game/setDayLength/#src.pyg2o.functions.game.setDayLength--parameters","title":"Parameters","text":"<p><code>float</code> miliseconds: day length in miliseconds.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def setDayLength(miliseconds : float):\n    \"\"\"\n    !!! note\n        Day length can't be smaller than 10 000 miliseconds.\n\n    This function will set the day length in miliseconds.\n    Original: [setDayLength](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/setDayLength/)\n\n    ## Declaration\n    ```python\n    async def setDayLength(miliseconds : float)\n    ```\n    ## Parameters\n    `float` **miliseconds**: day length in miliseconds.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/setServerDescription/","title":"<code>function</code> setServerDescription","text":"<p>This function will set the description of the server. Original: setServerDescription</p>"},{"location":"functions/game/setServerDescription/#src.pyg2o.functions.game.setServerDescription--declaration","title":"Declaration","text":"<pre><code>async def setServerDescription(description : str)\n</code></pre>"},{"location":"functions/game/setServerDescription/#src.pyg2o.functions.game.setServerDescription--parameters","title":"Parameters","text":"<p><code>str</code> description: the server description.</p>"},{"location":"functions/game/setServerDescription/#src.pyg2o.functions.game.setServerDescription--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if server description was set successfully, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def setServerDescription(description : str):\n    \"\"\"\n    This function will set the description of the server.\n    Original: [setServerDescription](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/setServerDescription/)\n\n    ## Declaration\n    ```python\n    async def setServerDescription(description : str)\n    ```\n    ## Parameters\n    `str` **description**: the server description.\n    ## Returns\n    `bool`: `true` if server description was set successfully, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/setServerWorld/","title":"<code>function</code> setServerWorld","text":"<p>Note</p> <p>The server world limit is set to 32 characters.</p> <p>Note</p> <p>If the target world path is written with backslashes instead of normal slashes, you need to escape it with another backslashes e.g. \"NEWWORLD\\NEWWORLD.ZEN\".</p> <p>This function will change the default world to which players will enter after joining. Original: setServerWorld</p>"},{"location":"functions/game/setServerWorld/#src.pyg2o.functions.game.setServerWorld--declaration","title":"Declaration","text":"<pre><code>async def setServerWorld(world : str)\n</code></pre>"},{"location":"functions/game/setServerWorld/#src.pyg2o.functions.game.setServerWorld--parameters","title":"Parameters","text":"<p><code>str</code> world: the path to the target world.</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def setServerWorld(world : str):\n    \"\"\"\n    !!! note\n        The server world limit is set to 32 characters.\n\n    !!! note\n        If the target world path is written with backslashes instead of normal slashes, you need to escape it with another backslashes e.g. \"NEWWORLD\\\\NEWWORLD.ZEN\".\n\n    This function will change the default world to which players will enter after joining.\n    Original: [setServerWorld](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/setServerWorld/)\n\n    ## Declaration\n    ```python\n    async def setServerWorld(world : str)\n    ```\n    ## Parameters\n    `str` **world**: the path to the target world.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/game/setTime/","title":"<code>function</code> setTime","text":"<p>Note</p> <p>This functions supports <code>pass_exception: bool</code> optional argument for manual handling exceptions.</p> <p>This function will set the current time in the game to the given time, for all the players. Original: setTime</p>"},{"location":"functions/game/setTime/#src.pyg2o.functions.game.setTime--declaration","title":"Declaration","text":"<pre><code>async def setTime(hour : int, min : int, day : int = 0)\n</code></pre>"},{"location":"functions/game/setTime/#src.pyg2o.functions.game.setTime--parameters","title":"Parameters","text":"<p><code>int</code> hour: the hour of new time (in the range between 0-23) or subtract value from hour (hour &lt; 0). <code>int</code> mins: the minute of new time (in the range between 0-59) or subtract value from mins (mins &lt; 0). <code>int</code> day: the day of new time or subtract value from day (day &lt; 0).</p> Source code in <code>src/pyg2o/functions/game.py</code> <pre><code>async def setTime(hour : int, min : int, day : int = 0):\n    \"\"\"\n    !!! note\n        This functions supports ``pass_exception: bool`` optional argument for manual handling exceptions.\n    This function will set the current time in the game to the given time, for all the players.\n    Original: [setTime](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/game/setTime/)\n\n    ## Declaration\n    ```python\n    async def setTime(hour : int, min : int, day : int = 0)\n    ```\n    ## Parameters\n    `int` **hour**: the hour of new time (in the range between 0-23) or subtract value from hour (hour &lt; 0).\n    `int` **mins**: the minute of new time (in the range between 0-59) or subtract value from mins (mins &lt; 0).\n    `int` **day**: the day of new time or subtract value from day (day &lt; 0).\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/clearNpcActions/","title":"<code>function</code> clearNpcActions","text":"<p>This function clears remote NPC actions queue. Remote NPCs uses actions queue to execute thier tasks. Original: clearNpcActions</p>"},{"location":"functions/npc/clearNpcActions/#src.pyg2o.functions.npc.clearNpcActions--declaration","title":"Declaration","text":"<pre><code>async def clearNpcActions(npc_id : int)\n</code></pre>"},{"location":"functions/npc/clearNpcActions/#src.pyg2o.functions.npc.clearNpcActions--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the npc identifier.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def clearNpcActions(npc_id : int):\n    \"\"\"\n    This function clears remote NPC actions queue. Remote NPCs uses actions queue to execute thier tasks.\n    Original: [clearNpcActions](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/clearNpcActions/)\n\n    ## Declaration\n    ```python\n    async def clearNpcActions(npc_id : int)\n    ```\n    ## Parameters\n    `int` **npc_id**: the npc identifier.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/createNpc/","title":"<code>function</code> createNpc","text":"<p>Note</p> <p>By default npcs won't be added to world. In order to do that, you have to call spawnPlayer.</p> <p>Note</p> <p>Remote NPC id will always begins from max slots value.</p> <p>This function creates remote NPC. Original: createNpc</p>"},{"location":"functions/npc/createNpc/#src.pyg2o.functions.npc.createNpc--declaration","title":"Declaration","text":"<pre><code>async def createNpc(name : str, instance : str = 'PC_HERO') -&gt; int\n</code></pre>"},{"location":"functions/npc/createNpc/#src.pyg2o.functions.npc.createNpc--parameters","title":"Parameters","text":"<p><code>str</code> name: the displayed name of the npc. <code>str</code> instance: the instance name of for the npc.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def createNpc(name : str, instance : str = 'PC_HERO') -&gt; int:\n    \"\"\"\n    !!! note\n        By default npcs won't be added to world. In order to do that, you have to call [spawnPlayer](../player/spawnPlayer.md).\n    !!! note\n        Remote NPC id will always begins from max slots value.\n    This function creates remote NPC.\n    Original: [createNpc](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/createNpc/)\n\n    ## Declaration\n    ```python\n    async def createNpc(name : str, instance : str = 'PC_HERO') -&gt; int\n    ```\n    ## Parameters\n    `str` **name**: the displayed name of the npc.\n    `str` **instance**: the instance name of for the npc.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/destroyNpc/","title":"<code>function</code> destroyNpc","text":"<p>This function destroys remote NPC. Original: destroyNpc</p>"},{"location":"functions/npc/destroyNpc/#src.pyg2o.functions.npc.destroyNpc--declaration","title":"Declaration","text":"<pre><code>async def destroyNpc(npc_id : int) -&gt; bool\n</code></pre>"},{"location":"functions/npc/destroyNpc/#src.pyg2o.functions.npc.destroyNpc--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc.</p>"},{"location":"functions/npc/destroyNpc/#src.pyg2o.functions.npc.destroyNpc--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when npc was successfully destroyed, otherwise false`.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def destroyNpc(npc_id : int) -&gt; bool:\n    \"\"\"\n    This function destroys remote NPC.\n    Original: [destroyNpc](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/destroyNpc/)\n\n    ## Declaration\n    ```python\n    async def destroyNpc(npc_id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    ## Returns\n    `bool`: `true` when npc was successfully destroyed, otherwise false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/getNpcAction/","title":"<code>function</code> getNpcAction","text":"<p>This function gets information about element on specified index in NPC action queue. Original: getNpcAction</p>"},{"location":"functions/npc/getNpcAction/#src.pyg2o.functions.npc.getNpcAction--declaration","title":"Declaration","text":"<pre><code>async def getNpcAction(npc_id : int, index : int) -&gt; dict\n</code></pre>"},{"location":"functions/npc/getNpcAction/#src.pyg2o.functions.npc.getNpcAction--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc. <code>int</code> index: the index of element in the queue.</p>"},{"location":"functions/npc/getNpcAction/#src.pyg2o.functions.npc.getNpcAction--returns","title":"Returns","text":"<p><code>dict {type, id, status}</code>: The table containing information about selected element.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def getNpcAction(npc_id : int, index : int) -&gt; dict:\n    \"\"\"\n    This function gets information about element on specified index in NPC action queue.\n    Original: [getNpcAction](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/getNpcAction/)\n\n    ## Declaration\n    ```python\n    async def getNpcAction(npc_id : int, index : int) -&gt; dict\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    `int` **index**: the index of element in the queue.\n    ## Returns\n    `dict {type, id, status}`: The table containing information about selected element.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/getNpcActions/","title":"<code>function</code> getNpcActions","text":"<p>This function gets informations about elements in NPC action queue. Original: getNpcActions</p>"},{"location":"functions/npc/getNpcActions/#src.pyg2o.functions.npc.getNpcActions--declaration","title":"Declaration","text":"<pre><code>async def getNpcActions(npc_id : int) -&gt; list\n</code></pre>"},{"location":"functions/npc/getNpcActions/#src.pyg2o.functions.npc.getNpcActions--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc.</p>"},{"location":"functions/npc/getNpcActions/#src.pyg2o.functions.npc.getNpcActions--returns","title":"Returns","text":"<p><code>list [{type, id}]</code>: The array containing information about queue elements.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def getNpcActions(npc_id : int) -&gt; list:\n    \"\"\"\n    This function gets informations about elements in NPC action queue.\n    Original: [getNpcActions](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/getNpcActions/)\n\n    ## Declaration\n    ```python\n    async def getNpcActions(npc_id : int) -&gt; list\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    ## Returns\n    `list [{type, id}]`: The array containing information about queue elements.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/getNpcActionsCount/","title":"<code>function</code> getNpcActionsCount","text":"<p>This function gets elements count in NPC action queue. Original: getNpcActionsCount</p>"},{"location":"functions/npc/getNpcActionsCount/#src.pyg2o.functions.npc.getNpcActionsCount--declaration","title":"Declaration","text":"<pre><code>async def getNpcActionsCount(npc_id : int) -&gt; int\n</code></pre>"},{"location":"functions/npc/getNpcActionsCount/#src.pyg2o.functions.npc.getNpcActionsCount--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc.</p>"},{"location":"functions/npc/getNpcActionsCount/#src.pyg2o.functions.npc.getNpcActionsCount--returns","title":"Returns","text":"<p><code>int</code>: The count of elements inside queue, otherwise <code>-1</code>.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def getNpcActionsCount(npc_id : int) -&gt; int:\n    \"\"\"\n    This function gets elements count in NPC action queue.\n    Original: [getNpcActionsCount](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/getNpcActionsCount/)\n\n    ## Declaration\n    ```python\n    async def getNpcActionsCount(npc_id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    ## Returns\n    `int`: The count of elements inside queue, otherwise `-1`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/getNpcHostPlayer/","title":"<code>function</code> getNpcHostPlayer","text":"<p>This function gets NPC host player id. Original: getNpcHostPlayer</p>"},{"location":"functions/npc/getNpcHostPlayer/#src.pyg2o.functions.npc.getNpcHostPlayer--declaration","title":"Declaration","text":"<pre><code>async def getNpcHostPlayer(npc_id : int) -&gt; int\n</code></pre>"},{"location":"functions/npc/getNpcHostPlayer/#src.pyg2o.functions.npc.getNpcHostPlayer--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc.</p>"},{"location":"functions/npc/getNpcHostPlayer/#src.pyg2o.functions.npc.getNpcHostPlayer--returns","title":"Returns","text":"<p><code>int</code>: the host player identifier. If there is no host player <code>-1</code> is returned instead.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def getNpcHostPlayer(npc_id : int) -&gt; int:\n    \"\"\"\n    This function gets NPC host player id.\n    Original: [getNpcHostPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/getNpcHostPlayer/)\n\n    ## Declaration\n    ```python\n    async def getNpcHostPlayer(npc_id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    ## Returns\n    `int`: the host player identifier. If there is no host player `-1` is returned instead.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/getNpcLastActionId/","title":"<code>function</code> getNpcLastActionId","text":"<p>This function gets last action identifier, that was enqued to the NPC action queue. Every action in queue has associated unique id, by which can be identified. Original: getNpcLastActionId</p>"},{"location":"functions/npc/getNpcLastActionId/#src.pyg2o.functions.npc.getNpcLastActionId--declaration","title":"Declaration","text":"<pre><code>async def getNpcLastActionId(npc_id : int) -&gt; int\n</code></pre>"},{"location":"functions/npc/getNpcLastActionId/#src.pyg2o.functions.npc.getNpcLastActionId--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc.</p>"},{"location":"functions/npc/getNpcLastActionId/#src.pyg2o.functions.npc.getNpcLastActionId--returns","title":"Returns","text":"<p><code>int</code>: The last finished action identifier, otherwise <code>-1</code>.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def getNpcLastActionId(npc_id : int) -&gt; int:\n    \"\"\"\n    This function gets last action identifier, that was enqued to the NPC action queue. Every action in queue has associated unique id, by which can be identified.\n    Original: [getNpcLastActionId](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/getNpcLastActionId/)\n\n    ## Declaration\n    ```python\n    async def getNpcLastActionId(npc_id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    ## Returns\n    `int`: The last finished action identifier, otherwise `-1`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/isNpc/","title":"<code>function</code> isNpc","text":"<p>This function checks whether id related to given object is remote NPC. Original: isNpc</p>"},{"location":"functions/npc/isNpc/#src.pyg2o.functions.npc.isNpc--declaration","title":"Declaration","text":"<pre><code>async def isNpc(npc_id : int) -&gt; bool\n</code></pre>"},{"location":"functions/npc/isNpc/#src.pyg2o.functions.npc.isNpc--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc.</p>"},{"location":"functions/npc/isNpc/#src.pyg2o.functions.npc.isNpc--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when object is NPC, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def isNpc(npc_id : int) -&gt; bool:\n    \"\"\"\n    This function checks whether id related to given object is remote NPC.\n    Original: [isNpc](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/isNpc/)\n\n    ## Declaration\n    ```python\n    async def isNpc(npc_id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    ## Returns\n    `bool`: `true` when object is NPC, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/isNpcActionFinished/","title":"<code>function</code> isNpcActionFinished","text":"<p>This function checks whether specified NPC action was finished. Original: isNpcActionFinished</p>"},{"location":"functions/npc/isNpcActionFinished/#src.pyg2o.functions.npc.isNpcActionFinished--declaration","title":"Declaration","text":"<pre><code>async def isNpcActionFinished(npc_id : int, action_id : int) -&gt; bool\n</code></pre>"},{"location":"functions/npc/isNpcActionFinished/#src.pyg2o.functions.npc.isNpcActionFinished--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the identifier of npc. <code>int</code> action_id: the unique action identifier.</p>"},{"location":"functions/npc/isNpcActionFinished/#src.pyg2o.functions.npc.isNpcActionFinished--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if specified action identifier was already finished, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def isNpcActionFinished(npc_id : int, action_id : int) -&gt; bool:\n    \"\"\"\n    This function checks whether specified NPC action was finished.\n    Original: [isNpcActionFinished](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/isNpcActionFinished/)\n\n    ## Declaration\n    ```python\n    async def isNpcActionFinished(npc_id : int, action_id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **npc_id**: the identifier of npc.\n    `int` **action_id**: the unique action identifier.\n    ## Returns\n    `bool`: `true` if specified action identifier was already finished, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/npcAttackMelee/","title":"<code>function</code> npcAttackMelee","text":"<p>Note</p> <p>Combo is internal Gothic value. Its behaviour can be sometimes undefined. For example -1 value doesn't work for not humanoid NPCs.</p> <p>This function enqueues attack melee action to the remote NPC action queue. Original: npcAttackMelee</p>"},{"location":"functions/npc/npcAttackMelee/#src.pyg2o.functions.npc.npcAttackMelee--declaration","title":"Declaration","text":"<pre><code>async def npcAttackMelee(attacker_id : int, enemy_id : int, attack_type : int, combo : int)\n</code></pre>"},{"location":"functions/npc/npcAttackMelee/#src.pyg2o.functions.npc.npcAttackMelee--parameters","title":"Parameters","text":"<p><code>int</code> attacker_id: the remote npc id. <code>int</code> enemy_id: the remote npc or player id. <code>int</code> attack_type: the type of attack. <code>int</code> combol: the combo sequence. For <code>-1</code> execute next command immediately.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def npcAttackMelee(attacker_id : int, enemy_id : int, attack_type : int, combo : int):\n    \"\"\"\n    !!! note\n        Combo is internal Gothic value. Its behaviour can be sometimes undefined. For example -1 value doesn't work for not humanoid NPCs.\n\n    This function enqueues attack melee action to the remote NPC action queue.\n    Original: [npcAttackMelee](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/npcAttackMelee/)\n\n    ## Declaration\n    ```python\n    async def npcAttackMelee(attacker_id : int, enemy_id : int, attack_type : int, combo : int)\n    ```\n    ## Parameters\n    `int` **attacker_id**: the remote npc id.\n    `int` **enemy_id**: the remote npc or player id.\n    `int` **attack_type**: the type of attack.\n    `int` **combol**: the combo sequence. For `-1` execute next command immediately.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/npcAttackRanged/","title":"<code>function</code> npcAttackRanged","text":"<p>This function enqueues attack ranged action to the remote NPC action queue. Original: npcAttackRanged</p>"},{"location":"functions/npc/npcAttackRanged/#src.pyg2o.functions.npc.npcAttackRanged--declaration","title":"Declaration","text":"<pre><code>async def npcAttackRanged(attacker_id : int, enemy_id : int)\n</code></pre>"},{"location":"functions/npc/npcAttackRanged/#src.pyg2o.functions.npc.npcAttackRanged--parameters","title":"Parameters","text":"<p><code>int</code> attacker_id: the remote npc id. <code>int</code> enemy_id: the remote npc or player id.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def npcAttackRanged(attacker_id : int, enemy_id : int):\n    \"\"\"\n    This function enqueues attack ranged action to the remote NPC action queue.\n    Original: [npcAttackRanged](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/npcAttackRanged/)\n\n    ## Declaration\n    ```python\n    async def npcAttackRanged(attacker_id : int, enemy_id : int)\n    ```\n    ## Parameters\n    `int` **attacker_id**: the remote npc id.\n    `int` **enemy_id**: the remote npc or player id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/npcSpellCast/","title":"<code>function</code> npcSpellCast","text":"<p>This function enqueues spell cast action to the remote NPC action queue. Original: npcSpellCast</p>"},{"location":"functions/npc/npcSpellCast/#src.pyg2o.functions.npc.npcSpellCast--declaration","title":"Declaration","text":"<pre><code>async def npcSpellCast(attacker_id : int, enemy_id : int)\n</code></pre>"},{"location":"functions/npc/npcSpellCast/#src.pyg2o.functions.npc.npcSpellCast--parameters","title":"Parameters","text":"<p><code>int</code> attacker_id: the remote npc id. <code>int</code> enemy_id: the remote npc or player id.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def npcSpellCast(attacker_id : int, enemy_id : int):\n    \"\"\"\n    This function enqueues spell cast action to the remote NPC action queue.\n    Original: [npcSpellCast](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/npcSpellCast/)\n\n    ## Declaration\n    ```python\n    async def npcSpellCast(attacker_id : int, enemy_id : int)\n    ```\n    ## Parameters\n    `int` **attacker_id**: the remote npc id.\n    `int` **enemy_id**: the remote npc or player id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/npcUseClosestMob/","title":"<code>function</code> npcUseClosestMob","text":"<p>This function enqueues use closest mob action to the remote NPC action queue. Original: npcUseClosestMob</p>"},{"location":"functions/npc/npcUseClosestMob/#src.pyg2o.functions.npc.npcUseClosestMob--declaration","title":"Declaration","text":"<pre><code>async def npcUseClosestMob(npc_id : int, sceme : str, target_state : int)\n</code></pre>"},{"location":"functions/npc/npcUseClosestMob/#src.pyg2o.functions.npc.npcUseClosestMob--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the npc identifier. <code>str</code> sceme: the animation sceme name, e.g: <code>\"BENCH\"</code> when you want to interact with bench. <code>int</code> target_state: the target state, use <code>1</code> if you want to start interaction and <code>-1</code> to end it.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def npcUseClosestMob(npc_id : int, sceme : str, target_state : int):\n    \"\"\"\n    This function enqueues use closest mob action to the remote NPC action queue.\n    Original: [npcUseClosestMob](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/npcUseClosestMob/)\n\n    ## Declaration\n    ```python\n    async def npcUseClosestMob(npc_id : int, sceme : str, target_state : int)\n    ```\n    ## Parameters\n    `int` **npc_id**: the npc identifier.\n    `str` **sceme**: the animation sceme name, e.g: `\"BENCH\"` when you want to interact with bench.\n    `int` **target_state**: the target state, use `1` if you want to start interaction and `-1` to end it.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/npc/setNpcHostPlayer/","title":"<code>function</code> setNpcHostPlayer","text":"<p>This function sets new NPC host player. Original: setNpcHostPlayer</p>"},{"location":"functions/npc/setNpcHostPlayer/#src.pyg2o.functions.npc.setNpcHostPlayer--declaration","title":"Declaration","text":"<pre><code>async def setNpcHostPlayer(npc_id : int, host_id : int) -&gt; bool\n</code></pre>"},{"location":"functions/npc/setNpcHostPlayer/#src.pyg2o.functions.npc.setNpcHostPlayer--parameters","title":"Parameters","text":"<p><code>int</code> npc_id: the npc identifier. <code>int</code> host_id: the player host identifier.</p>"},{"location":"functions/npc/setNpcHostPlayer/#src.pyg2o.functions.npc.setNpcHostPlayer--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if host was successfully changed, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/npc.py</code> <pre><code>async def setNpcHostPlayer(npc_id : int, host_id : int) -&gt; bool:\n    \"\"\"\n    This function sets new NPC host player.\n    Original: [setNpcHostPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/npc/setNpcHostPlayer/)\n\n    ## Declaration\n    ```python\n    async def setNpcHostPlayer(npc_id : int, host_id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **npc_id**: the npc identifier.\n    `int` **host_id**: the player host identifier.\n    ## Returns\n    `bool`: `true` if host was successfully changed, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/addBan/","title":"<code>function</code> addBan","text":"<p>Note</p> <p>All properties should be of primitive types and are optional, but you still need to provide at least one of them.</p> <p>Note</p> <p>The reason string can't be longer than 255 characters.</p> <p>Note</p> <p>The meta table is used for storing custom data.</p> <p>This function will add a new ban on the server. Original: addBan</p>"},{"location":"functions/player/addBan/#src.pyg2o.functions.player.addBan--declaration","title":"Declaration","text":"<pre><code>async def addBan(info : dict) -&gt; bool\n</code></pre>"},{"location":"functions/player/addBan/#src.pyg2o.functions.player.addBan--parameters","title":"Parameters","text":"<p><code>dict {serial, mac, ip, name, reason, timestamp, meta={..}}</code> info: the ban properties. <code>int</code> host_id: the player host identifier.</p>"},{"location":"functions/player/addBan/#src.pyg2o.functions.player.addBan--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if ban was added, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def addBan(info : dict) -&gt; bool:\n    \"\"\"\n    !!! note\n        All properties should be of primitive types and are optional, but you still need to provide at least one of them.\n    !!! note\n        The reason string can't be longer than 255 characters.\n    !!! note\n        The meta table is used for storing custom data.\n    This function will add a new ban on the server.\n    Original: [addBan](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/addBan/)\n\n    ## Declaration\n    ```python\n    async def addBan(info : dict) -&gt; bool\n    ```\n    ## Parameters\n    `dict {serial, mac, ip, name, reason, timestamp, meta={..}}` **info**: the ban properties.\n    `int` **host_id**: the player host identifier.\n    ## Returns\n    `bool`: `true` if ban was added, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/applyPlayerOverlay/","title":"<code>function</code> applyPlayerOverlay","text":"<p>This function will apply animation overlay on player for all players. Original: applyPlayerOverlay</p>"},{"location":"functions/player/applyPlayerOverlay/#src.pyg2o.functions.player.applyPlayerOverlay--declaration","title":"Declaration","text":"<pre><code>async def applyPlayerOverlay(id : int, overlay : str) -&gt; bool\n</code></pre>"},{"location":"functions/player/applyPlayerOverlay/#src.pyg2o.functions.player.applyPlayerOverlay--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> overlay: the overlay Mds name, e.g. 'HUMANS_MILITIA.MDS'</p>"},{"location":"functions/player/applyPlayerOverlay/#src.pyg2o.functions.player.applyPlayerOverlay--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if animation overlay was successfully applied on player, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def applyPlayerOverlay(id : int, overlay : str) -&gt; bool:\n    \"\"\"\n    This function will apply animation overlay on player for all players.\n    Original: [applyPlayerOverlay](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/applyPlayerOverlay/)\n\n    ## Declaration\n    ```python\n    async def applyPlayerOverlay(id : int, overlay : str) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **overlay**: the overlay Mds name, e.g. 'HUMANS_MILITIA.MDS'\n    ## Returns\n    `bool`: `true` if animation overlay was successfully applied on player, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/ban/","title":"<code>function</code> ban","text":"<p>Note</p> <p>The reason string can't be longer than 255 characters.</p> <p>This function will ban the player on the server. Original: ban</p>"},{"location":"functions/player/ban/#src.pyg2o.functions.player.ban--declaration","title":"Declaration","text":"<pre><code>async def ban(id : int, minutes : int, reason : str)\n</code></pre>"},{"location":"functions/player/ban/#src.pyg2o.functions.player.ban--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> minutes: the time how long ban will take in minutes. Passing <code>0</code> will cause the player to have permanent ban. <code>str</code> reason: the reason why player was banned.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def ban(id : int, minutes : int, reason : str):\n    \"\"\"\n    !!! note\n        The reason string can't be longer than 255 characters.\n    This function will ban the player on the server.\n    Original: [ban](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/ban/)\n\n    ## Declaration\n    ```python\n    async def ban(id : int, minutes : int, reason : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **minutes**: the time how long ban will take in minutes. Passing `0` will cause the player to have permanent ban.\n    `str` **reason**: the reason why player was banned.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/drawWeapon/","title":"<code>function</code> drawWeapon","text":"<p>This function will cause player to draw a weapon. If hero/npc doesn't have equipped weapon assosiated with the preffered weapon mode, then it will try to draw melee weapon, otherwise <code>WEAPONMODE_FIST</code> will be used instead. Original: drawWeapon</p>"},{"location":"functions/player/drawWeapon/#src.pyg2o.functions.player.drawWeapon--declaration","title":"Declaration","text":"<pre><code>async def drawWeapon(id : int, weaponMode : int)\n</code></pre>"},{"location":"functions/player/drawWeapon/#src.pyg2o.functions.player.drawWeapon--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> weaponMode: the preffered weapon mode. For more information see Weapon mode constants.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def drawWeapon(id : int, weaponMode : int):\n    \"\"\"\n    This function will cause player to draw a weapon. If hero/npc doesn't have equipped weapon assosiated with the preffered weapon mode, then it will try to draw melee weapon, otherwise `WEAPONMODE_FIST` will be used instead.\n    Original: [drawWeapon](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/drawWeapon/)\n\n    ## Declaration\n    ```python\n    async def drawWeapon(id : int, weaponMode : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **weaponMode**: the preffered weapon mode. For more information see [Weapon mode constants](../../constants/weapon-mode.md).\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/equipItem/","title":"<code>function</code> equipItem","text":"<p>Note</p> <p>If you want to equip weapon/shield, first make sure that player is in <code>WEAPONMODE_NONE</code>.</p> <p>This function is used to equip item on player for all players. Original: equipItem</p>"},{"location":"functions/player/equipItem/#src.pyg2o.functions.player.equipItem--declaration","title":"Declaration","text":"<pre><code>async def equipItem(id : int, instance : str, slotId : int = -1)\n</code></pre>"},{"location":"functions/player/equipItem/#src.pyg2o.functions.player.equipItem--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the item instance from Daedalus scripts. <code>int</code> slotId: the slot id in which you want to equip item on player, e.g scrolls, runes, rings, by default the item will be equipped on the first free slot.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def equipItem(id : int, instance : str, slotId : int = -1):\n    \"\"\"\n    !!! note\n        If you want to equip weapon/shield, first make sure that player is in `WEAPONMODE_NONE`.\n    This function is used to equip item on player for all players.\n    Original: [equipItem](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/equipItem/)\n\n    ## Declaration\n    ```python\n    async def equipItem(id : int, instance : str, slotId : int = -1)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the item instance from Daedalus scripts.\n    `int` **slotId**: the slot id in which you want to equip item on player, e.g scrolls, runes, rings, by default the item will be equipped on the first free slot.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerAmulet/","title":"<code>function</code> getPlayerAmulet","text":"<p>This function will get the equipped player amulet. Original: getPlayerAmulet</p>"},{"location":"functions/player/getPlayerAmulet/#src.pyg2o.functions.player.getPlayerAmulet--declaration","title":"Declaration","text":"<pre><code>async def getPlayerAmulet(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerAmulet/#src.pyg2o.functions.player.getPlayerAmulet--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerAmulet/#src.pyg2o.functions.player.getPlayerAmulet--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerAmulet(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player amulet.\n    Original: [getPlayerAmulet](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerAmulet/)\n\n    ## Declaration\n    ```python\n    async def getPlayerAmulet(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerAngle/","title":"<code>function</code> getPlayerAngle","text":"<p>This function will get the player facing rotation on y axis. Original: getPlayerAngle</p>"},{"location":"functions/player/getPlayerAngle/#src.pyg2o.functions.player.getPlayerAngle--declaration","title":"Declaration","text":"<pre><code>async def getPlayerAngle(id : int) -&gt; float\n</code></pre>"},{"location":"functions/player/getPlayerAngle/#src.pyg2o.functions.player.getPlayerAngle--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerAngle/#src.pyg2o.functions.player.getPlayerAngle--returns","title":"Returns","text":"<p><code>float</code>: the facing rotation on y axis.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerAngle(id : int) -&gt; float:\n    \"\"\"\n    This function will get the player facing rotation on y axis.\n    Original: [getPlayerAngle](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerAngle/)\n\n    ## Declaration\n    ```python\n    async def getPlayerAngle(id : int) -&gt; float\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `float`: the facing rotation on y axis.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerAni/","title":"<code>function</code> getPlayerAni","text":"<p>This function will get the player facing rotation on y axis. Original: getPlayerAni</p>"},{"location":"functions/player/getPlayerAni/#src.pyg2o.functions.player.getPlayerAni--declaration","title":"Declaration","text":"<pre><code>async def getPlayerAni(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerAni/#src.pyg2o.functions.player.getPlayerAni--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerAni/#src.pyg2o.functions.player.getPlayerAni--returns","title":"Returns","text":"<p><code>str</code>: the ani name, e.g: <code>\"S_RUN\"</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerAni(id : int) -&gt; str:\n    \"\"\"\n    This function will get the player facing rotation on y axis.\n    Original: [getPlayerAni](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerAni/)\n\n    ## Declaration\n    ```python\n    async def getPlayerAni(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the ani name, e.g: `\"S_RUN\"`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerArmor/","title":"<code>function</code> getPlayerArmor","text":"<p>This function will get the equipped player armor. Original: getPlayerArmor</p>"},{"location":"functions/player/getPlayerArmor/#src.pyg2o.functions.player.getPlayerArmor--declaration","title":"Declaration","text":"<pre><code>async def getPlayerArmor(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerArmor/#src.pyg2o.functions.player.getPlayerArmor--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerArmor/#src.pyg2o.functions.player.getPlayerArmor--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerArmor(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player armor.\n    Original: [getPlayerArmor](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerArmor/)\n\n    ## Declaration\n    ```python\n    async def getPlayerArmor(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerAtVector/","title":"<code>function</code> getPlayerAtVector","text":"<p>This function will get player at vector. Original: getPlayerAtVector</p>"},{"location":"functions/player/getPlayerAtVector/#src.pyg2o.functions.player.getPlayerAtVector--declaration","title":"Declaration","text":"<pre><code>getPlayerAtVector(id : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/getPlayerAtVector/#src.pyg2o.functions.player.getPlayerAtVector--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerAtVector/#src.pyg2o.functions.player.getPlayerAtVector--returns","title":"Returns","text":"<p><code>tuple (x, y, z)</code>: the player at vector.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerAtVector(id : int) -&gt; Optional[tuple]:\n    \"\"\"\n    This function will get player at vector.\n    Original: [getPlayerAtVector](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerAtVector/)\n\n    ## Declaration\n    ```python\n    getPlayerAtVector(id : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `tuple (x, y, z)`: the player at vector.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/player/getPlayerBelt/","title":"<code>function</code> getPlayerBelt","text":"<p>This function will get the equipped player belt. Original: getPlayerBelt</p>"},{"location":"functions/player/getPlayerBelt/#src.pyg2o.functions.player.getPlayerBelt--declaration","title":"Declaration","text":"<pre><code>async def getPlayerBelt(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerBelt/#src.pyg2o.functions.player.getPlayerBelt--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerBelt/#src.pyg2o.functions.player.getPlayerBelt--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerBelt(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player belt.\n    Original: [getPlayerBelt](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerBelt/)\n\n    ## Declaration\n    ```python\n    async def getPlayerBelt(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerCameraPosition/","title":"<code>function</code> getPlayerCameraPosition","text":"<p>This function will get the player camera position in world. Original: getPlayerCameraPosition</p>"},{"location":"functions/player/getPlayerCameraPosition/#src.pyg2o.functions.player.getPlayerCameraPosition--declaration","title":"Declaration","text":"<pre><code>getPlayerCameraPosition(id : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/getPlayerCameraPosition/#src.pyg2o.functions.player.getPlayerCameraPosition--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerCameraPosition/#src.pyg2o.functions.player.getPlayerCameraPosition--returns","title":"Returns","text":"<p><code>tuple (x, y, z)</code>: the dictionary that represents camera position.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerCameraPosition(id : int) -&gt; Optional[tuple]:\n    \"\"\"\n    This function will get the player camera position in world.\n    Original: [getPlayerCameraPosition](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerCameraPosition/)\n\n    ## Declaration\n    ```python\n    getPlayerCameraPosition(id : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `tuple (x, y, z)`: the dictionary that represents camera position.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/player/getPlayerCollision/","title":"<code>function</code> getPlayerCollision","text":"<p>This function will get the player collision. Original: getPlayerCollision</p>"},{"location":"functions/player/getPlayerCollision/#src.pyg2o.functions.player.getPlayerCollision--declaration","title":"Declaration","text":"<pre><code>async def getPlayerCollision(id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/getPlayerCollision/#src.pyg2o.functions.player.getPlayerCollision--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerCollision/#src.pyg2o.functions.player.getPlayerCollision--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if collision is enabled, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerCollision(id : int) -&gt; bool:\n    \"\"\"\n    This function will get the player collision.\n    Original: [getPlayerCollision](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerCollision/)\n\n    ## Declaration\n    ```python\n    async def getPlayerCollision(id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `bool`: `true` if collision is enabled, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerColor/","title":"<code>function</code> getPlayerColor","text":"<p>This function will get the player nickname color. Original: getPlayerColor</p>"},{"location":"functions/player/getPlayerColor/#src.pyg2o.functions.player.getPlayerColor--declaration","title":"Declaration","text":"<pre><code>async def getPlayerColor(id : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/getPlayerColor/#src.pyg2o.functions.player.getPlayerColor--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerColor/#src.pyg2o.functions.player.getPlayerColor--returns","title":"Returns","text":"<p><code>tuple (r, g, b)</code>: the player nickname color.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerColor(id : int) -&gt; Optional[tuple]:\n    \"\"\"\n    This function will get the player nickname color.\n    Original: [getPlayerColor](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerColor/)\n\n    ## Declaration\n    ```python\n    async def getPlayerColor(id : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `tuple (r, g, b)`: the player nickname color.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['r'], result['g'], result['b']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/player/getPlayerContext/","title":"<code>function</code> getPlayerContext","text":"<p>This function is used to get player script context. For more information see this article. Original: getPlayerContext</p>"},{"location":"functions/player/getPlayerContext/#src.pyg2o.functions.player.getPlayerContext--declaration","title":"Declaration","text":"<pre><code>async def getPlayerContext(id : int, type : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerContext/#src.pyg2o.functions.player.getPlayerContext--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerContext/#src.pyg2o.functions.player.getPlayerContext--returns","title":"Returns","text":"<p><code>int</code>: the value stored within selected context.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerContext(id : int, type : int) -&gt; int:\n    \"\"\"\n    This function is used to get player script context. For more information see [this article](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/multiplayer/script-context/).\n    Original: [getPlayerContext](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerContext/)\n\n    ## Declaration\n    ```python\n    async def getPlayerContext(id : int, type : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the value stored within selected context.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerDexterity/","title":"<code>function</code> getPlayerDexterity","text":"<p>This function will get the player dexterity points. Original: getPlayerDexterity</p>"},{"location":"functions/player/getPlayerDexterity/#src.pyg2o.functions.player.getPlayerDexterity--declaration","title":"Declaration","text":"<pre><code>async def getPlayerDexterity(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerDexterity/#src.pyg2o.functions.player.getPlayerDexterity--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerDexterity/#src.pyg2o.functions.player.getPlayerDexterity--returns","title":"Returns","text":"<p><code>int</code>: the dexterity points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerDexterity(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player dexterity points.\n    Original: [getPlayerDexterity](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerDexterity/)\n\n    ## Declaration\n    ```python\n    async def getPlayerDexterity(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the dexterity points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerFaceAnis/","title":"<code>function</code> getPlayerFaceAnis","text":"<p>This function will get the player dexterity points. Original: getPlayerFaceAnis</p>"},{"location":"functions/player/getPlayerFaceAnis/#src.pyg2o.functions.player.getPlayerFaceAnis--declaration","title":"Declaration","text":"<pre><code>async def getPlayerFaceAnis(id : int) -&gt; list\n</code></pre>"},{"location":"functions/player/getPlayerFaceAnis/#src.pyg2o.functions.player.getPlayerFaceAnis--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerFaceAnis/#src.pyg2o.functions.player.getPlayerFaceAnis--returns","title":"Returns","text":"<p><code>list [{aniName, layer}]</code>: the list of objects describing face animation.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerFaceAnis(id : int) -&gt; list:\n    \"\"\"\n    This function will get the player dexterity points.\n    Original: [getPlayerFaceAnis](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerFaceAnis/)\n\n    ## Declaration\n    ```python\n    async def getPlayerFaceAnis(id : int) -&gt; list\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `list [{aniName, layer}]`: the list of objects describing face animation.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerFatness/","title":"<code>function</code> getPlayerFatness","text":"<p>This function will get the player fatness factor. Original: getPlayerFatness</p>"},{"location":"functions/player/getPlayerFatness/#src.pyg2o.functions.player.getPlayerFatness--declaration","title":"Declaration","text":"<pre><code>async def getPlayerFatness(id : int) -&gt; float\n</code></pre>"},{"location":"functions/player/getPlayerFatness/#src.pyg2o.functions.player.getPlayerFatness--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerFatness/#src.pyg2o.functions.player.getPlayerFatness--returns","title":"Returns","text":"<p><code>float</code>: the fatness ratio.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerFatness(id : int) -&gt; float:\n    \"\"\"\n    This function will get the player fatness factor.\n    Original: [getPlayerFatness](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerFatness/)\n\n    ## Declaration\n    ```python\n    async def getPlayerFatness(id : int) -&gt; float\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `float`: the fatness ratio.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerFocus/","title":"<code>function</code> getPlayerFocus","text":"<p>This function is used to get current focused player by other player. Original: getPlayerFocus</p>"},{"location":"functions/player/getPlayerFocus/#src.pyg2o.functions.player.getPlayerFocus--declaration","title":"Declaration","text":"<pre><code>async def getPlayerFocus(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerFocus/#src.pyg2o.functions.player.getPlayerFocus--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerFocus/#src.pyg2o.functions.player.getPlayerFocus--returns","title":"Returns","text":"<p><code>int</code>: the current focused player id. In case were there is no focus returns <code>-1</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerFocus(id : int) -&gt; int:\n    \"\"\"\n    This function is used to get current focused player by other player.\n    Original: [getPlayerFocus](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerFocus/)\n\n    ## Declaration\n    ```python\n    async def getPlayerFocus(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the current focused player id. In case were there is no focus returns `-1`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerHealth/","title":"<code>function</code> getPlayerHealth","text":"<p>This function will get the player health points. Original: getPlayerHealth</p>"},{"location":"functions/player/getPlayerHealth/#src.pyg2o.functions.player.getPlayerHealth--declaration","title":"Declaration","text":"<pre><code>async def getPlayerHealth(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerHealth/#src.pyg2o.functions.player.getPlayerHealth--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerHealth/#src.pyg2o.functions.player.getPlayerHealth--returns","title":"Returns","text":"<p><code>int</code>: the health points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerHealth(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player health points.\n    Original: [getPlayerHealth](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerHealth/)\n\n    ## Declaration\n    ```python\n    async def getPlayerHealth(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the health points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerHelmet/","title":"<code>function</code> getPlayerHelmet","text":"<p>This function will get the equipped player helmet. Original: getPlayerHelmet</p>"},{"location":"functions/player/getPlayerHelmet/#src.pyg2o.functions.player.getPlayerHelmet--declaration","title":"Declaration","text":"<pre><code>async def getPlayerHelmet(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerHelmet/#src.pyg2o.functions.player.getPlayerHelmet--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerHelmet/#src.pyg2o.functions.player.getPlayerHelmet--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerHelmet(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player helmet.\n    Original: [getPlayerHelmet](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerHelmet/)\n\n    ## Declaration\n    ```python\n    async def getPlayerHelmet(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerIP/","title":"<code>function</code> getPlayerIP","text":"<p>This function will get the player ipv4 ip address. Original: getPlayerIP</p>"},{"location":"functions/player/getPlayerIP/#src.pyg2o.functions.player.getPlayerIP--declaration","title":"Declaration","text":"<pre><code>async def getPlayerIP(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerIP/#src.pyg2o.functions.player.getPlayerIP--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerIP/#src.pyg2o.functions.player.getPlayerIP--returns","title":"Returns","text":"<p><code>str</code>: the player ip address, e.g <code>\"127.0.0.1\"</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerIP(id : int) -&gt; str:\n    \"\"\"\n    This function will get the player ipv4 ip address.\n    Original: [getPlayerIP](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerIP/)\n\n    ## Declaration\n    ```python\n    async def getPlayerIP(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player ip address, e.g `\"127.0.0.1\"`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerInstance/","title":"<code>function</code> getPlayerInstance","text":"<p>This function will get the player instance. Original: getPlayerInstance</p>"},{"location":"functions/player/getPlayerInstance/#src.pyg2o.functions.player.getPlayerInstance--declaration","title":"Declaration","text":"<pre><code>async def getPlayerInstance(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerInstance/#src.pyg2o.functions.player.getPlayerInstance--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerInstance/#src.pyg2o.functions.player.getPlayerInstance--returns","title":"Returns","text":"<p><code>str</code>: the player instance.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerInstance(id : int) -&gt; str:\n    \"\"\"\n    This function will get the player instance.\n    Original: [getPlayerInstance](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerInstance/)\n\n    ## Declaration\n    ```python\n    async def getPlayerInstance(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player instance.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerInvisible/","title":"<code>function</code> getPlayerInvisible","text":"<p>This function will get the player invisiblity for all players. Original: getPlayerInvisible</p>"},{"location":"functions/player/getPlayerInvisible/#src.pyg2o.functions.player.getPlayerInvisible--declaration","title":"Declaration","text":"<pre><code>async def getPlayerInvisible(id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/getPlayerInvisible/#src.pyg2o.functions.player.getPlayerInvisible--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerInvisible/#src.pyg2o.functions.player.getPlayerInvisible--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when player is invisible for all players, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerInvisible(id : int) -&gt; bool:\n    \"\"\"\n    This function will get the player invisiblity for all players.\n    Original: [getPlayerInvisible](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerInvisible/)\n\n    ## Declaration\n    ```python\n    async def getPlayerInvisible(id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `bool`: `true` when player is invisible for all players, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerMacAddr/","title":"<code>function</code> getPlayerMacAddr","text":"<p>Note</p> <p>The function can return null if player isn't connected.</p> <p>This function will get the player MAC address. MAC is used to uniquely idientify each player, however it can be changed/spoofed by more advance users. Original: getPlayerMacAddr</p>"},{"location":"functions/player/getPlayerMacAddr/#src.pyg2o.functions.player.getPlayerMacAddr--declaration","title":"Declaration","text":"<pre><code>async def getPlayerMacAddr(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerMacAddr/#src.pyg2o.functions.player.getPlayerMacAddr--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerMacAddr/#src.pyg2o.functions.player.getPlayerMacAddr--returns","title":"Returns","text":"<p><code>str</code>: the player mac address, e.g <code>\"00-1b-44-11-3a-b7\"</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerMacAddr(id : int) -&gt; str:\n    \"\"\"\n    !!! note\n        The function can return null if player isn't connected.\n    This function will get the player MAC address.\n    MAC is used to uniquely idientify each player,\n    however it can be changed/spoofed by more advance users.\n    Original: [getPlayerMacAddr](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerMacAddr/)\n\n    ## Declaration\n    ```python\n    async def getPlayerMacAddr(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player mac address, e.g `\"00-1b-44-11-3a-b7\"`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerMana/","title":"<code>function</code> getPlayerMana","text":"<p>This function will get the player mana points. Original: getPlayerMana</p>"},{"location":"functions/player/getPlayerMana/#src.pyg2o.functions.player.getPlayerMana--declaration","title":"Declaration","text":"<pre><code>async def getPlayerMana(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerMana/#src.pyg2o.functions.player.getPlayerMana--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerMana/#src.pyg2o.functions.player.getPlayerMana--returns","title":"Returns","text":"<p><code>int</code>: the mana points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerMana(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player mana points.\n    Original: [getPlayerMana](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerMana/)\n\n    ## Declaration\n    ```python\n    async def getPlayerMana(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the mana points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerMaxHealth/","title":"<code>function</code> getPlayerMaxHealth","text":"<p>This function will get the player max health points. Original: getPlayerMaxHealth</p>"},{"location":"functions/player/getPlayerMaxHealth/#src.pyg2o.functions.player.getPlayerMaxHealth--declaration","title":"Declaration","text":"<pre><code>async def getPlayerMaxHealth(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerMaxHealth/#src.pyg2o.functions.player.getPlayerMaxHealth--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerMaxHealth/#src.pyg2o.functions.player.getPlayerMaxHealth--returns","title":"Returns","text":"<p><code>int</code>: the max health points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerMaxHealth(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player max health points.\n    Original: [getPlayerMaxHealth](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerMaxHealth/)\n\n    ## Declaration\n    ```python\n    async def getPlayerMaxHealth(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the max health points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerMaxMana/","title":"<code>function</code> getPlayerMaxMana","text":"<p>This function will get the player max mana points. Original: getPlayerMaxMana</p>"},{"location":"functions/player/getPlayerMaxMana/#src.pyg2o.functions.player.getPlayerMaxMana--declaration","title":"Declaration","text":"<pre><code>async def getPlayerMaxMana(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerMaxMana/#src.pyg2o.functions.player.getPlayerMaxMana--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerMaxMana/#src.pyg2o.functions.player.getPlayerMaxMana--returns","title":"Returns","text":"<p><code>int</code>: the max mana points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerMaxMana(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player max mana points.\n    Original: [getPlayerMaxMana](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerMaxMana/)\n\n    ## Declaration\n    ```python\n    async def getPlayerMaxMana(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the max mana points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerMeleeWeapon/","title":"<code>function</code> getPlayerMeleeWeapon","text":"<p>This function will get the equipped player melee weapon. Original: getPlayerMeleeWeapon</p>"},{"location":"functions/player/getPlayerMeleeWeapon/#src.pyg2o.functions.player.getPlayerMeleeWeapon--declaration","title":"Declaration","text":"<pre><code>async def getPlayerMeleeWeapon(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerMeleeWeapon/#src.pyg2o.functions.player.getPlayerMeleeWeapon--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerMeleeWeapon/#src.pyg2o.functions.player.getPlayerMeleeWeapon--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerMeleeWeapon(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player melee weapon.\n    Original: [getPlayerMeleeWeapon](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerMeleeWeapon/)\n\n    ## Declaration\n    ```python\n    async def getPlayerMeleeWeapon(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerName/","title":"<code>function</code> getPlayerName","text":"<p>This function will get the player nickname. Original: getPlayerName</p>"},{"location":"functions/player/getPlayerName/#src.pyg2o.functions.player.getPlayerName--declaration","title":"Declaration","text":"<pre><code>async def getPlayerName(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerName/#src.pyg2o.functions.player.getPlayerName--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerName/#src.pyg2o.functions.player.getPlayerName--returns","title":"Returns","text":"<p><code>str</code>: the player nickname.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerName(id : int) -&gt; str:\n    \"\"\"\n    This function will get the player nickname.\n    Original: [getPlayerName](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerName/)\n\n    ## Declaration\n    ```python\n    async def getPlayerName(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player nickname.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerPing/","title":"<code>function</code> getPlayerPing","text":"<p>Note</p> <p>The function can return <code>-1</code> if player isn't connected.</p> <p>This function will get the player ping. Ping gets updated after each 2500 miliseconds. Original: getPlayerPing</p>"},{"location":"functions/player/getPlayerPing/#src.pyg2o.functions.player.getPlayerPing--declaration","title":"Declaration","text":"<pre><code>async def getPlayerPing(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerPing/#src.pyg2o.functions.player.getPlayerPing--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerPing/#src.pyg2o.functions.player.getPlayerPing--returns","title":"Returns","text":"<p><code>str</code>: the current player ping.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerPing(id : int) -&gt; int:\n    \"\"\"\n    !!! note\n        The function can return `-1` if player isn't connected.\n    This function will get the player ping. Ping gets updated after each 2500 miliseconds.\n    Original: [getPlayerPing](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerPing/)\n\n    ## Declaration\n    ```python\n    async def getPlayerPing(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the current player ping.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerPosition/","title":"<code>function</code> getPlayerPosition","text":"<p>This function will get the player world position. Original: getPlayerPosition</p>"},{"location":"functions/player/getPlayerPosition/#src.pyg2o.functions.player.getPlayerPosition--declaration","title":"Declaration","text":"<pre><code>async def getPlayerPosition(id : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/getPlayerPosition/#src.pyg2o.functions.player.getPlayerPosition--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerPosition/#src.pyg2o.functions.player.getPlayerPosition--returns","title":"Returns","text":"<p><code>tuple (x, y, z)</code>: the player world position.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerPosition(id : int) -&gt; Optional[tuple]:\n    \"\"\"\n    This function will get the player world position.\n    Original: [getPlayerPosition](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerPosition/)\n\n    ## Declaration\n    ```python\n    async def getPlayerPosition(id : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `tuple (x, y, z)`: the player world position.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/player/getPlayerRangedWeapon/","title":"<code>function</code> getPlayerRangedWeapon","text":"<p>This function will get the equipped player ranged weapon. Original: getPlayerRangedWeapon</p>"},{"location":"functions/player/getPlayerRangedWeapon/#src.pyg2o.functions.player.getPlayerRangedWeapon--declaration","title":"Declaration","text":"<pre><code>async def getPlayerRangedWeapon(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerRangedWeapon/#src.pyg2o.functions.player.getPlayerRangedWeapon--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerRangedWeapon/#src.pyg2o.functions.player.getPlayerRangedWeapon--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerRangedWeapon(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player ranged weapon.\n    Original: [getPlayerRangedWeapon](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerRangedWeapon/)\n\n    ## Declaration\n    ```python\n    async def getPlayerRangedWeapon(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerRespawnTime/","title":"<code>function</code> getPlayerRespawnTime","text":"<p>This function will get the player time to respawn after death. Original: getPlayerRespawnTime</p>"},{"location":"functions/player/getPlayerRespawnTime/#src.pyg2o.functions.player.getPlayerRespawnTime--declaration","title":"Declaration","text":"<pre><code>async def getPlayerRespawnTime(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerRespawnTime/#src.pyg2o.functions.player.getPlayerRespawnTime--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerRespawnTime/#src.pyg2o.functions.player.getPlayerRespawnTime--returns","title":"Returns","text":"<p><code>str</code>: the player respawn time.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerRespawnTime(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player time to respawn after death.\n    Original: [getPlayerRespawnTime](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerRespawnTime/)\n\n    ## Declaration\n    ```python\n    async def getPlayerRespawnTime(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player respawn time.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerRing/","title":"<code>function</code> getPlayerRing","text":"<p>This function will get the equipped player ring. Original: getPlayerRing</p>"},{"location":"functions/player/getPlayerRing/#src.pyg2o.functions.player.getPlayerRing--declaration","title":"Declaration","text":"<pre><code>dasync def getPlayerRing(id : int, handId : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerRing/#src.pyg2o.functions.player.getPlayerRing--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> handId: the handId. For more information see Hand constants.</p>"},{"location":"functions/player/getPlayerRing/#src.pyg2o.functions.player.getPlayerRing--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerRing(id : int, handId : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player ring.\n    Original: [getPlayerRing](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerRing/)\n\n    ## Declaration\n    ```python\n    dasync def getPlayerRing(id : int, handId : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **handId**: the handId. For more information see [Hand constants](../../constants/hand.md).\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerScale/","title":"<code>function</code> getPlayerScale","text":"<p>This function will get the player scale. Original: getPlayerScale</p>"},{"location":"functions/player/getPlayerScale/#src.pyg2o.functions.player.getPlayerScale--declaration","title":"Declaration","text":"<pre><code>async def getPlayerScale(id : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/getPlayerScale/#src.pyg2o.functions.player.getPlayerScale--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerScale/#src.pyg2o.functions.player.getPlayerScale--returns","title":"Returns","text":"<p><code>tuple (x, y, z)</code>: the player scale.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerScale(id : int) -&gt; Optional[tuple]:\n    \"\"\"\n    This function will get the player scale.\n    Original: [getPlayerScale](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerScale/)\n\n    ## Declaration\n    ```python\n    async def getPlayerScale(id : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `tuple (x, y, z)`: the player scale.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/player/getPlayerSerial/","title":"<code>function</code> getPlayerSerial","text":"<p>Note</p> <p>The function can return <code>null</code> if player isn't connected.</p> <p>Note</p> <p>For some players (e.g: that are playing on linux using WINE) this function might return empty string.</p> <p>This function will get the player serial. Serial is used to uniquely idientify each player. Original: getPlayerSerial</p>"},{"location":"functions/player/getPlayerSerial/#src.pyg2o.functions.player.getPlayerSerial--declaration","title":"Declaration","text":"<pre><code>async def getPlayerSerial(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerSerial/#src.pyg2o.functions.player.getPlayerSerial--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerSerial/#src.pyg2o.functions.player.getPlayerSerial--returns","title":"Returns","text":"<p><code>str</code>: the player serial.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerSerial(id : int) -&gt; str:\n    \"\"\"\n    !!! note\n        The function can return `null` if player isn't connected.\n    !!! note\n        For some players (e.g: that are playing on linux using WINE) this function might return empty string.\n    This function will get the player serial.\n    Serial is used to uniquely idientify each player.\n    Original: [getPlayerSerial](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerSerial/)\n\n    ## Declaration\n    ```python\n    async def getPlayerSerial(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player serial.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerShield/","title":"<code>function</code> getPlayerShield","text":"<p>This function will get the equipped player shield. Original: getPlayerShield</p>"},{"location":"functions/player/getPlayerShield/#src.pyg2o.functions.player.getPlayerShield--declaration","title":"Declaration","text":"<pre><code>async def getPlayerShield(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerShield/#src.pyg2o.functions.player.getPlayerShield--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerShield/#src.pyg2o.functions.player.getPlayerShield--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerShield(id : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player shield.\n    Original: [getPlayerShield](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerShield/)\n\n    ## Declaration\n    ```python\n    async def getPlayerShield(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerSkillWeapon/","title":"<code>function</code> getPlayerSkillWeapon","text":"<p>This function will get the player skill weapon. Original: getPlayerSkillWeapon</p>"},{"location":"functions/player/getPlayerSkillWeapon/#src.pyg2o.functions.player.getPlayerSkillWeapon--declaration","title":"Declaration","text":"<pre><code>async def getPlayerSkillWeapon(id : int, skillId : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerSkillWeapon/#src.pyg2o.functions.player.getPlayerSkillWeapon--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> skillId: For more information see Skill weapon constants.</p>"},{"location":"functions/player/getPlayerSkillWeapon/#src.pyg2o.functions.player.getPlayerSkillWeapon--returns","title":"Returns","text":"<p><code>int</code>: the percentage value in range &lt;0, 100&gt;.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerSkillWeapon(id : int, skillId : int) -&gt; int:\n    \"\"\"\n    This function will get the player skill weapon.\n    Original: [getPlayerSkillWeapon](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerSkillWeapon/)\n\n    ## Declaration\n    ```python\n    async def getPlayerSkillWeapon(id : int, skillId : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **skillId**: For more information see [Skill weapon constants](../../constants/skill-weapon.md).\n    ## Returns\n    `int`: the percentage value in range &lt;0, 100&gt;.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerSpell/","title":"<code>function</code> getPlayerSpell","text":"<p>This function will get the equipped player spell. Original: getPlayerSpell</p>"},{"location":"functions/player/getPlayerSpell/#src.pyg2o.functions.player.getPlayerSpell--declaration","title":"Declaration","text":"<pre><code>dasync def getPlayerSpell(id : int, slotId : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerSpell/#src.pyg2o.functions.player.getPlayerSpell--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> slotId: the equipped slotId in range &lt;0, 6&gt;.</p>"},{"location":"functions/player/getPlayerSpell/#src.pyg2o.functions.player.getPlayerSpell--returns","title":"Returns","text":"<p><code>str</code>: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerSpell(id : int, slotId : int) -&gt; str:\n    \"\"\"\n    This function will get the equipped player spell.\n    Original: [getPlayerSpell](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerSpell/)\n\n    ## Declaration\n    ```python\n    dasync def getPlayerSpell(id : int, slotId : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **slotId**: the equipped slotId in range &lt;0, 6&gt;.\n    ## Returns\n    `str`: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerStrength/","title":"<code>function</code> getPlayerStrength","text":"<p>This function will get the player strength points. Original: getPlayerStrength</p>"},{"location":"functions/player/getPlayerStrength/#src.pyg2o.functions.player.getPlayerStrength--declaration","title":"Declaration","text":"<pre><code>async def getPlayerStrength(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerStrength/#src.pyg2o.functions.player.getPlayerStrength--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerStrength/#src.pyg2o.functions.player.getPlayerStrength--returns","title":"Returns","text":"<p><code>int</code>: the strength points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerStrength(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player strength points.\n    Original: [getPlayerStrength](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerStrength/)\n\n    ## Declaration\n    ```python\n    async def getPlayerStrength(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the strength points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerTalent/","title":"<code>function</code> getPlayerTalent","text":"<p>This function will get the player talent. Original: getPlayerTalent</p>"},{"location":"functions/player/getPlayerTalent/#src.pyg2o.functions.player.getPlayerTalent--declaration","title":"Declaration","text":"<pre><code>async def getPlayerTalent(id : int, talentId : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerTalent/#src.pyg2o.functions.player.getPlayerTalent--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> talentId: the talent id. For more information see Talent constants.</p>"},{"location":"functions/player/getPlayerTalent/#src.pyg2o.functions.player.getPlayerTalent--returns","title":"Returns","text":"<p><code>int</code>: the current talent value for specific talent id.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerTalent(id : int, talentId : int) -&gt; int:\n    \"\"\"\n    This function will get the player talent.\n    Original: [getPlayerTalent](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerTalent/)\n\n    ## Declaration\n    ```python\n    async def getPlayerTalent(id : int, talentId : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **talentId**: the talent id. For more information see [Talent constants](../../constants/talent.md).\n    ## Returns\n    `int`: the current talent value for specific talent id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerUID/","title":"<code>function</code> getPlayerUID","text":"<p>This function will get the player pc unique identifier. Original: getPlayerUID</p>"},{"location":"functions/player/getPlayerUID/#src.pyg2o.functions.player.getPlayerUID--declaration","title":"Declaration","text":"<pre><code>async def getPlayerUID(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerUID/#src.pyg2o.functions.player.getPlayerUID--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerUID/#src.pyg2o.functions.player.getPlayerUID--returns","title":"Returns","text":"<p><code>str</code>: the player UID.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerUID(id : int) -&gt; str:\n    \"\"\"\n    This function will get the player pc unique identifier.\n    Original: [getPlayerUID](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerUID/)\n\n    ## Declaration\n    ```python\n    async def getPlayerUID(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player UID.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerVirtualWorld/","title":"<code>function</code> getPlayerVirtualWorld","text":"<p>This function will get the player virtual world. Original: getPlayerVirtualWorld</p>"},{"location":"functions/player/getPlayerVirtualWorld/#src.pyg2o.functions.player.getPlayerVirtualWorld--declaration","title":"Declaration","text":"<pre><code>async def getPlayerVirtualWorld(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerVirtualWorld/#src.pyg2o.functions.player.getPlayerVirtualWorld--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerVirtualWorld/#src.pyg2o.functions.player.getPlayerVirtualWorld--returns","title":"Returns","text":"<p><code>int</code>: the player virtual world id.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerVirtualWorld(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player virtual world.\n    Original: [getPlayerVirtualWorld](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerVirtualWorld/)\n\n    ## Declaration\n    ```python\n    async def getPlayerVirtualWorld(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the player virtual world id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerVisual/","title":"<code>function</code> getPlayerVisual","text":"<p>This function will get the player visual. Original: getPlayerVisual</p>"},{"location":"functions/player/getPlayerVisual/#src.pyg2o.functions.player.getPlayerVisual--declaration","title":"Declaration","text":"<pre><code>async def getPlayerVisual(id : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/getPlayerVisual/#src.pyg2o.functions.player.getPlayerVisual--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerVisual/#src.pyg2o.functions.player.getPlayerVisual--returns","title":"Returns","text":"<p><code>tuple (bodyModel, bodyTxt, headModel, headTxt)</code>: player visual.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerVisual(id : int) -&gt; Optional[tuple]:\n    \"\"\"\n    This function will get the player visual.\n    Original: [getPlayerVisual](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerVisual/)\n\n    ## Declaration\n    ```python\n    async def getPlayerVisual(id : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `tuple (bodyModel, bodyTxt, headModel, headTxt)`: player visual.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['bodyModel'], result['bodyTxt'], result['headModel'], result['headTxt']) if result is not None else (None, None, None, None)\n</code></pre>"},{"location":"functions/player/getPlayerWeaponMode/","title":"<code>function</code> getPlayerWeaponMode","text":"<p>This function will get the player weapon mode. Original: getPlayerWeaponMode</p>"},{"location":"functions/player/getPlayerWeaponMode/#src.pyg2o.functions.player.getPlayerWeaponMode--declaration","title":"Declaration","text":"<pre><code>async def getPlayerWeaponMode(id : int) -&gt; int\n</code></pre>"},{"location":"functions/player/getPlayerWeaponMode/#src.pyg2o.functions.player.getPlayerWeaponMode--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerWeaponMode/#src.pyg2o.functions.player.getPlayerWeaponMode--returns","title":"Returns","text":"<p><code>int</code>: the player weaponMode, for more information see Weapon mode constants.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerWeaponMode(id : int) -&gt; int:\n    \"\"\"\n    This function will get the player weapon mode.\n    Original: [getPlayerWeaponMode](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerWeaponMode/)\n\n    ## Declaration\n    ```python\n    async def getPlayerWeaponMode(id : int) -&gt; int\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `int`: the player weaponMode, for more information see [Weapon mode constants](../../constants/weapon-mode.md).\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/getPlayerWorld/","title":"<code>function</code> getPlayerWorld","text":"<p>This function will get the player world. Original: getPlayerWorld</p>"},{"location":"functions/player/getPlayerWorld/#src.pyg2o.functions.player.getPlayerWorld--declaration","title":"Declaration","text":"<pre><code>async def getPlayerWorld(id : int) -&gt; str\n</code></pre>"},{"location":"functions/player/getPlayerWorld/#src.pyg2o.functions.player.getPlayerWorld--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/getPlayerWorld/#src.pyg2o.functions.player.getPlayerWorld--returns","title":"Returns","text":"<p><code>str</code>: the player world.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def getPlayerWorld(id : int) -&gt; str:\n    \"\"\"\n    This function will get the player world.\n    Original: [getPlayerWorld](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/getPlayerWorld/)\n\n    ## Declaration\n    ```python\n    async def getPlayerWorld(id : int) -&gt; str\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `str`: the player world.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/giveItem/","title":"<code>function</code> giveItem","text":"<p>This function is used to give item for player. Original: giveItem</p>"},{"location":"functions/player/giveItem/#src.pyg2o.functions.player.giveItem--declaration","title":"Declaration","text":"<pre><code>async def giveItem(id : int, instance : str, amount : int)\n</code></pre>"},{"location":"functions/player/giveItem/#src.pyg2o.functions.player.giveItem--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the item instance from Daedalus scripts. <code>int</code> amount: the amount of item, e.g: <code>1000</code> gold coins.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def giveItem(id : int, instance : str, amount : int):\n    \"\"\"\n    This function is used to give item for player.\n    Original: [giveItem](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/giveItem/)\n\n    ## Declaration\n    ```python\n    async def giveItem(id : int, instance : str, amount : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the item instance from Daedalus scripts.\n    `int` **amount**: the amount of item, e.g: `1000` gold coins.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/hitPlayer/","title":"<code>function</code> hitPlayer","text":"<p>This function is used to simulate hit between attacker and victim. It will only work with if killer or victim is a real player. The victim will receive damage calculated damage by the game. Original: hitPlayer</p>"},{"location":"functions/player/hitPlayer/#src.pyg2o.functions.player.hitPlayer--declaration","title":"Declaration","text":"<pre><code>async def hitPlayer(id : int, target_id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/hitPlayer/#src.pyg2o.functions.player.hitPlayer--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> target_id: the victim id.</p>"},{"location":"functions/player/hitPlayer/#src.pyg2o.functions.player.hitPlayer--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if hit was successfully simulated, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def hitPlayer(id : int, target_id : int) -&gt; bool:\n    \"\"\"\n    This function is used to simulate hit between attacker and victim. It will only work with if killer or victim is a real player. The victim will receive damage calculated damage by the game.\n    Original: [hitPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/hitPlayer/)\n\n    ## Declaration\n    ```python\n    async def hitPlayer(id : int, target_id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **target_id**: the victim id.\n    ## Returns\n    `bool`: `true` if hit was successfully simulated, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/isPlayerConnected/","title":"<code>function</code> isPlayerConnected","text":"<p>The function is used to check whether player is connected to the server. Original: isPlayerConnected</p>"},{"location":"functions/player/isPlayerConnected/#src.pyg2o.functions.player.isPlayerConnected--declaration","title":"Declaration","text":"<pre><code>async def isPlayerConnected(id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/isPlayerConnected/#src.pyg2o.functions.player.isPlayerConnected--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/isPlayerConnected/#src.pyg2o.functions.player.isPlayerConnected--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when player is connected, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def isPlayerConnected(id : int) -&gt; bool:\n    \"\"\"\n    The function is used to check whether player is connected to the server.\n    Original: [isPlayerConnected](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/isPlayerConnected/)\n\n    ## Declaration\n    ```python\n    async def isPlayerConnected(id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `bool`: `true` when player is connected, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/isPlayerDead/","title":"<code>function</code> isPlayerDead","text":"<p>The function is used to check whether player is dead. Original: isPlayerDead</p>"},{"location":"functions/player/isPlayerDead/#src.pyg2o.functions.player.isPlayerDead--declaration","title":"Declaration","text":"<pre><code>async def isPlayerDead(id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/isPlayerDead/#src.pyg2o.functions.player.isPlayerDead--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/isPlayerDead/#src.pyg2o.functions.player.isPlayerDead--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when player is dead, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def isPlayerDead(id : int) -&gt; bool:\n    \"\"\"\n    The function is used to check whether player is dead.\n    Original: [isPlayerDead](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/isPlayerDead/)\n\n    ## Declaration\n    ```python\n    async def isPlayerDead(id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `bool`: `true` when player is dead, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/isPlayerSpawned/","title":"<code>function</code> isPlayerSpawned","text":"<p>The function is used to check whether player is spawned. Original: isPlayerSpawned</p>"},{"location":"functions/player/isPlayerSpawned/#src.pyg2o.functions.player.isPlayerSpawned--declaration","title":"Declaration","text":"<pre><code>async def isPlayerSpawned(id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/isPlayerSpawned/#src.pyg2o.functions.player.isPlayerSpawned--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/isPlayerSpawned/#src.pyg2o.functions.player.isPlayerSpawned--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when player is spawned, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def isPlayerSpawned(id : int) -&gt; bool:\n    \"\"\"\n    The function is used to check whether player is spawned.\n    Original: [isPlayerSpawned](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/isPlayerSpawned/)\n\n    ## Declaration\n    ```python\n    async def isPlayerSpawned(id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `bool`: `true` when player is spawned, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/isPlayerUnconscious/","title":"<code>function</code> isPlayerUnconscious","text":"<p>The function is used to check whether player is in unconscious state. The player will be unconscious, when it gets beaten up, but not killed. Original: isPlayerUnconscious</p>"},{"location":"functions/player/isPlayerUnconscious/#src.pyg2o.functions.player.isPlayerUnconscious--declaration","title":"Declaration","text":"<pre><code>async def isPlayerUnconscious(id : int) -&gt; bool\n</code></pre>"},{"location":"functions/player/isPlayerUnconscious/#src.pyg2o.functions.player.isPlayerUnconscious--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/player/isPlayerUnconscious/#src.pyg2o.functions.player.isPlayerUnconscious--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when player is unconscious, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def isPlayerUnconscious(id : int) -&gt; bool:\n    \"\"\"\n    The function is used to check whether player is in unconscious state. The player will be unconscious, when it gets beaten up, but not killed.\n    Original: [isPlayerUnconscious](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/isPlayerUnconscious/)\n\n    ## Declaration\n    ```python\n    async def isPlayerUnconscious(id : int) -&gt; bool\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `bool`: `true` when player is unconscious, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/kick/","title":"<code>function</code> kick","text":"<p>Note</p> <p>The reason string can't be longer than 255 characters.</p> <p>This function will kick the player from the server. Original: kick</p>"},{"location":"functions/player/kick/#src.pyg2o.functions.player.kick--declaration","title":"Declaration","text":"<pre><code>async def kick(id : int, reason : str)\n</code></pre>"},{"location":"functions/player/kick/#src.pyg2o.functions.player.kick--parameters","title":"Parameters","text":"<p><code>int</code> id: the reason why player was kicked. <code>str</code> reason: the reason why player was kicked.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def kick(id : int, reason : str):\n    \"\"\"\n    !!! note\n        The reason string can't be longer than 255 characters.\n    This function will kick the player from the server.\n    Original: [kick](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/kick/)\n\n    ## Declaration\n    ```python\n    async def kick(id : int, reason : str)\n    ```\n    ## Parameters\n    `int` **id**: the reason why player was kicked.\n    `str` **reason**: the reason why player was kicked.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/playAni/","title":"<code>function</code> playAni","text":"<p>This function is used to play animation on player for all players. Original: playAni</p>"},{"location":"functions/player/playAni/#src.pyg2o.functions.player.playAni--declaration","title":"Declaration","text":"<pre><code>async def playAni(id : int, aniName : str)\n</code></pre>"},{"location":"functions/player/playAni/#src.pyg2o.functions.player.playAni--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> aniName: the name of the animation, e.g: <code>\"T_STAND_2_SIT\"</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def playAni(id : int, aniName : str):\n    \"\"\"\n    This function is used to play animation on player for all players.\n    Original: [playAni](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/playAni/)\n\n    ## Declaration\n    ```python\n    async def playAni(id : int, aniName : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **aniName**: the name of the animation, e.g: `\"T_STAND_2_SIT\"`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/playFaceAni/","title":"<code>function</code> playFaceAni","text":"<p>This function is used to play face animation on player. Original: playFaceAni</p>"},{"location":"functions/player/playFaceAni/#src.pyg2o.functions.player.playFaceAni--declaration","title":"Declaration","text":"<pre><code>async def playFaceAni(id : int, aniName : str)\n</code></pre>"},{"location":"functions/player/playFaceAni/#src.pyg2o.functions.player.playFaceAni--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> aniName: the name of the animation, e.g: <code>\"S_FRIENDLY\"</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def playFaceAni(id : int, aniName : str):\n    \"\"\"\n    This function is used to play face animation on player.\n    Original: [playFaceAni](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/playFaceAni/)\n\n    ## Declaration\n    ```python\n    async def playFaceAni(id : int, aniName : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **aniName**: the name of the animation, e.g: `\"S_FRIENDLY\"`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/readySpell/","title":"<code>function</code> readySpell","text":"<p>This function will cause player to ready equipped spell. Original: readySpell</p>"},{"location":"functions/player/readySpell/#src.pyg2o.functions.player.readySpell--declaration","title":"Declaration","text":"<pre><code>async def readySpell(id : int, slotId : int, manaInvested : int)\n</code></pre>"},{"location":"functions/player/readySpell/#src.pyg2o.functions.player.readySpell--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> slotId: the equipped spell slotId in range &lt;0, 6&gt;. <code>int</code> manaInvested: the spell cast cost in mana points.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def readySpell(id : int, slotId : int, manaInvested : int):\n    \"\"\"\n    This function will cause player to ready equipped spell.\n    Original: [readySpell](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/readySpell/)\n\n    ## Declaration\n    ```python\n    async def readySpell(id : int, slotId : int, manaInvested : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **slotId**: the equipped spell slotId in range &lt;0, 6&gt;.\n    `int` **manaInvested**: the spell cast cost in mana points.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/removeItem/","title":"<code>function</code> removeItem","text":"<p>This function is used to remove item from player. Original: removeItem</p>"},{"location":"functions/player/removeItem/#src.pyg2o.functions.player.removeItem--declaration","title":"Declaration","text":"<pre><code>async def removeItem(id : int, instance : str, amount : int)\n</code></pre>"},{"location":"functions/player/removeItem/#src.pyg2o.functions.player.removeItem--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the item instance from Daedalus scripts. <code>int</code> amount: the amount of item, e.g: <code>1000</code> gold coins.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def removeItem(id : int, instance : str, amount : int):\n    \"\"\"\n    This function is used to remove item from player.\n    Original: [removeItem](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/removeItem/)\n\n    ## Declaration\n    ```python\n    async def removeItem(id : int, instance : str, amount : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the item instance from Daedalus scripts.\n    `int` **amount**: the amount of item, e.g: `1000` gold coins.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/removePlayerOverlay/","title":"<code>function</code> removePlayerOverlay","text":"<p>This function will remove animation overlay from player for all players. Original: removePlayerOverlay</p>"},{"location":"functions/player/removePlayerOverlay/#src.pyg2o.functions.player.removePlayerOverlay--declaration","title":"Declaration","text":"<pre><code>async def removePlayerOverlay(id : int, overlay : str) -&gt; bool:\n</code></pre>"},{"location":"functions/player/removePlayerOverlay/#src.pyg2o.functions.player.removePlayerOverlay--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> overlay: the overlay Mds name, e.g. 'HUMANS_MILITIA.MDS'</p>"},{"location":"functions/player/removePlayerOverlay/#src.pyg2o.functions.player.removePlayerOverlay--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> if animation overlay was successfully removed from player, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def removePlayerOverlay(id : int, overlay : str) -&gt; bool:\n    \"\"\"\n    This function will remove animation overlay from player for all players.\n    Original: [removePlayerOverlay](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/removePlayerOverlay/)\n\n    ## Declaration\n    ```python\n    async def removePlayerOverlay(id : int, overlay : str) -&gt; bool:\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **overlay**: the overlay Mds name, e.g. 'HUMANS_MILITIA.MDS'\n    ## Returns\n    `bool`: `true` if animation overlay was successfully removed from player, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/removeWeapon/","title":"<code>function</code> removeWeapon","text":"<p>This function will cause player to hide a weapon. Original: removeWeapon</p>"},{"location":"functions/player/removeWeapon/#src.pyg2o.functions.player.removeWeapon--declaration","title":"Declaration","text":"<pre><code>async def removeWeapon(id : int)\n</code></pre>"},{"location":"functions/player/removeWeapon/#src.pyg2o.functions.player.removeWeapon--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def removeWeapon(id : int):\n    \"\"\"\n    This function will cause player to hide a weapon.\n    Original: [removeWeapon](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/removeWeapon/)\n\n    ## Declaration\n    ```python\n    async def removeWeapon(id : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerAngle/","title":"<code>function</code> setPlayerAngle","text":"<p>This function will set the player facing rotation on y axis for all players. Original: setPlayerAngle</p>"},{"location":"functions/player/setPlayerAngle/#src.pyg2o.functions.player.setPlayerAngle--declaration","title":"Declaration","text":"<pre><code>async def setPlayerAngle(id : int, angle : float)\n</code></pre>"},{"location":"functions/player/setPlayerAngle/#src.pyg2o.functions.player.setPlayerAngle--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>float</code> angle: the facing rotation on y axis.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerAngle(id : int, angle : float):\n    \"\"\"\n    This function will set the player facing rotation on y axis for all players.\n    Original: [setPlayerAngle](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerAngle/)\n\n    ## Declaration\n    ```python\n    async def setPlayerAngle(id : int, angle : float)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `float` **angle**: the facing rotation on y axis.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerCollision/","title":"<code>function</code> setPlayerCollision","text":"<p>This function will set the player collision. Original: setPlayerCollision</p>"},{"location":"functions/player/setPlayerCollision/#src.pyg2o.functions.player.setPlayerCollision--declaration","title":"Declaration","text":"<pre><code>async def setPlayerCollision(id : int, collision : bool)\n</code></pre>"},{"location":"functions/player/setPlayerCollision/#src.pyg2o.functions.player.setPlayerCollision--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>bool</code> collision: <code>true</code> if want to enable collision, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerCollision(id : int, collision : bool):\n    \"\"\"\n    This function will set the player collision.\n    Original: [setPlayerCollision](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerCollision/)\n\n    ## Declaration\n    ```python\n    async def setPlayerCollision(id : int, collision : bool)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `bool` **collision**: `true` if want to enable collision, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerColor/","title":"<code>function</code> setPlayerColor","text":"<p>This function will set the player nickname color for all players. Original: setPlayerColor</p>"},{"location":"functions/player/setPlayerColor/#src.pyg2o.functions.player.setPlayerColor--declaration","title":"Declaration","text":"<pre><code>async def setPlayerColor(id : int, r : int, g : int, b : int)\n</code></pre>"},{"location":"functions/player/setPlayerColor/#src.pyg2o.functions.player.setPlayerColor--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> r: the red color component in RGB model. <code>int</code> g: the green color component in RGB model. <code>int</code> b: the blue color component in RGB model.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerColor(id : int, r : int, g : int, b : int):\n    \"\"\"\n    This function will set the player nickname color for all players.\n    Original: [setPlayerColor](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerColor/)\n\n    ## Declaration\n    ```python\n    async def setPlayerColor(id : int, r : int, g : int, b : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **r**: the red color component in RGB model.\n    `int` **g**: the green color component in RGB model.\n    `int` **b**: the blue color component in RGB model.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerDexterity/","title":"<code>function</code> setPlayerDexterity","text":"<p>This function will set the player dexterity points for all players. Original: setPlayerDexterity</p>"},{"location":"functions/player/setPlayerDexterity/#src.pyg2o.functions.player.setPlayerDexterity--declaration","title":"Declaration","text":"<pre><code>async def setPlayerDexterity(id : int, dexterity : int)\n</code></pre>"},{"location":"functions/player/setPlayerDexterity/#src.pyg2o.functions.player.setPlayerDexterity--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> dexterity: the dexterity points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerDexterity(id : int, dexterity : int):\n    \"\"\"\n    This function will set the player dexterity points for all players.\n    Original: [setPlayerDexterity](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerDexterity/)\n\n    ## Declaration\n    ```python\n    async def setPlayerDexterity(id : int, dexterity : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **dexterity**: the dexterity points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerFatness/","title":"<code>function</code> setPlayerFatness","text":"<p>This function will set the player fatness factor for all players. Original: setPlayerFatness</p>"},{"location":"functions/player/setPlayerFatness/#src.pyg2o.functions.player.setPlayerFatness--declaration","title":"Declaration","text":"<pre><code>async def setPlayerFatness(id : int, fatness : float)\n</code></pre>"},{"location":"functions/player/setPlayerFatness/#src.pyg2o.functions.player.setPlayerFatness--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>float</code> fatness: ratio of how much you want to make player fatter, <code>0.0</code> is default fatness (none).</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerFatness(id : int, fatness : float):\n    \"\"\"\n    This function will set the player fatness factor for all players.\n    Original: [setPlayerFatness](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerFatness/)\n\n    ## Declaration\n    ```python\n    async def setPlayerFatness(id : int, fatness : float)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `float` **fatness**: ratio of how much you want to make player fatter, `0.0` is default fatness (none).\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerHealth/","title":"<code>function</code> setPlayerHealth","text":"<p>This function will set the player health points for all players. Original: setPlayerHealth</p>"},{"location":"functions/player/setPlayerHealth/#src.pyg2o.functions.player.setPlayerHealth--declaration","title":"Declaration","text":"<pre><code>async def setPlayerHealth(id : int, health : int)\n</code></pre>"},{"location":"functions/player/setPlayerHealth/#src.pyg2o.functions.player.setPlayerHealth--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> health: health points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerHealth(id : int, health : int):\n    \"\"\"\n    This function will set the player health points for all players.\n    Original: [setPlayerHealth](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerHealth/)\n\n    ## Declaration\n    ```python\n    async def setPlayerHealth(id : int, health : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **health**: health points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerInstance/","title":"<code>function</code> setPlayerInstance","text":"<p>This function will set the player instance for all players. Instance describes the player attributes, like visual, stats, and more.. You can find more information about npc instances in daedalus scripts. Original: setPlayerInstance</p>"},{"location":"functions/player/setPlayerInstance/#src.pyg2o.functions.player.setPlayerInstance--declaration","title":"Declaration","text":"<pre><code>async def setPlayerInstance(id : int, instance : str)\n</code></pre>"},{"location":"functions/player/setPlayerInstance/#src.pyg2o.functions.player.setPlayerInstance--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the new player instance.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerInstance(id : int, instance : str):\n    \"\"\"\n    This function will set the player instance for all players. Instance describes the player attributes, like visual, stats, and more.. You can find more information about npc instances in daedalus scripts.\n    Original: [setPlayerInstance](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerInstance/)\n\n    ## Declaration\n    ```python\n    async def setPlayerInstance(id : int, instance : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the new player instance.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerInvisible/","title":"<code>function</code> setPlayerInvisible","text":"<p>This function will toggle the player invisiblity for all players. The invisible player will still see other visible players. Original: setPlayerInvisible</p>"},{"location":"functions/player/setPlayerInvisible/#src.pyg2o.functions.player.setPlayerInvisible--declaration","title":"Declaration","text":"<pre><code>async def setPlayerInvisible(id : int, toggle : bool)\n</code></pre>"},{"location":"functions/player/setPlayerInvisible/#src.pyg2o.functions.player.setPlayerInvisible--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>bool</code> toggle: <code>true</code> if the player should be invisible for all players, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerInvisible(id : int, toggle : bool):\n    \"\"\"\n    This function will toggle the player invisiblity for all players.\n    The invisible player will still see other visible players.\n    Original: [setPlayerInvisible](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerInvisible/)\n\n    ## Declaration\n    ```python\n    async def setPlayerInvisible(id : int, toggle : bool)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `bool` **toggle**: `true` if the player should be invisible for all players, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerMana/","title":"<code>function</code> setPlayerMana","text":"<p>This function will set the player mana points for all players. Original: setPlayerMana</p>"},{"location":"functions/player/setPlayerMana/#src.pyg2o.functions.player.setPlayerMana--declaration","title":"Declaration","text":"<pre><code>async def setPlayerMana(id : int, Mana : int)\n</code></pre>"},{"location":"functions/player/setPlayerMana/#src.pyg2o.functions.player.setPlayerMana--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> mana: mana points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerMana(id : int, mana : int):\n    \"\"\"\n    This function will set the player mana points for all players.\n    Original: [setPlayerMana](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerMana/)\n\n    ## Declaration\n    ```python\n    async def setPlayerMana(id : int, Mana : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **mana**: mana points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerMaxHealth/","title":"<code>function</code> setPlayerMaxHealth","text":"<p>This function will set the player max health points for all players. Original: setPlayerMaxHealth</p>"},{"location":"functions/player/setPlayerMaxHealth/#src.pyg2o.functions.player.setPlayerMaxHealth--declaration","title":"Declaration","text":"<pre><code>async def setPlayerMaxHealth(id : int, maxHealth : int)\n</code></pre>"},{"location":"functions/player/setPlayerMaxHealth/#src.pyg2o.functions.player.setPlayerMaxHealth--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> maxHealth: max health points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerMaxHealth(id : int, maxHealth : int):\n    \"\"\"\n    This function will set the player max health points for all players.\n    Original: [setPlayerMaxHealth](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerMaxHealth/)\n\n    ## Declaration\n    ```python\n    async def setPlayerMaxHealth(id : int, maxHealth : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **maxHealth**: max health points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerMaxMana/","title":"<code>function</code> setPlayerMaxMana","text":"<p>This function will set the player max mana points for all players. Original: setPlayerMaxMana</p>"},{"location":"functions/player/setPlayerMaxMana/#src.pyg2o.functions.player.setPlayerMaxMana--declaration","title":"Declaration","text":"<pre><code>async def setPlayerMaxMana(id : int, maxMana : int)\n</code></pre>"},{"location":"functions/player/setPlayerMaxMana/#src.pyg2o.functions.player.setPlayerMaxMana--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> maxMana: max mana points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerMaxMana(id : int, maxMana : int):\n    \"\"\"\n    This function will set the player max mana points for all players.\n    Original: [setPlayerMaxMana](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerMaxMana/)\n\n    ## Declaration\n    ```python\n    async def setPlayerMaxMana(id : int, maxMana : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **maxMana**: max mana points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerName/","title":"<code>function</code> setPlayerName","text":"<p>Note</p> <p>The name string can't be longer than 18 characters, and must be unique for each player.</p> <p>This function will set the player unique nickname for all players. Original: setPlayerName</p>"},{"location":"functions/player/setPlayerName/#src.pyg2o.functions.player.setPlayerName--declaration","title":"Declaration","text":"<pre><code>async def setPlayerName(id : int, name : str)\n</code></pre>"},{"location":"functions/player/setPlayerName/#src.pyg2o.functions.player.setPlayerName--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the new unique player name.</p>"},{"location":"functions/player/setPlayerName/#src.pyg2o.functions.player.setPlayerName--returns","title":"Returns","text":"<p><code>bool</code>: <code>true</code> when unique player name was set, otherwise <code>false</code>.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerName(id : int, name : str) -&gt; bool:\n    \"\"\"\n    !!! note\n        The name string can't be longer than 18 characters, and must be unique for each player.\n    This function will set the player unique nickname for all players.\n    Original: [setPlayerName](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerName/)\n\n    ## Declaration\n    ```python\n    async def setPlayerName(id : int, name : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the new unique player name.\n    ## Returns\n    `bool`: `true` when unique player name was set, otherwise `false`.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerRespawnTime/","title":"<code>function</code> setPlayerRespawnTime","text":"<p>Note</p> <p>The respawnTime can't be smaller than 1001 miliseconds.</p> <p>This function will set the player time to respawn after death. If set to 0, respawn is disabled for selected player. Original: setPlayerRespawnTime</p>"},{"location":"functions/player/setPlayerRespawnTime/#src.pyg2o.functions.player.setPlayerRespawnTime--declaration","title":"Declaration","text":"<pre><code>async def setPlayerRespawnTime(id : int, respawnTime : int)\n</code></pre>"},{"location":"functions/player/setPlayerRespawnTime/#src.pyg2o.functions.player.setPlayerRespawnTime--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> respawnTime: the new respawn time in miliseconds.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerRespawnTime(id : int, respawnTime : int):\n    \"\"\"\n    !!! note\n        The respawnTime can't be smaller than 1001 miliseconds.\n    This function will set the player time to respawn after death. If set to 0, respawn is disabled for selected player.\n    Original: [setPlayerRespawnTime](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerRespawnTime/)\n\n    ## Declaration\n    ```python\n    async def setPlayerRespawnTime(id : int, respawnTime : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **respawnTime**: the new respawn time in miliseconds.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerScale/","title":"<code>function</code> setPlayerScale","text":"<p>Note</p> <p>This functions supports <code>pass_exception: bool</code> optional argument for manual handling exceptions.</p> <p>This function will set the player scale for all players. Original: setPlayerScale</p>"},{"location":"functions/player/setPlayerScale/#src.pyg2o.functions.player.setPlayerScale--declaration","title":"Declaration","text":"<pre><code>async def setPlayerScale(id : int, x : float, y : float, z : float) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/player/setPlayerScale/#src.pyg2o.functions.player.setPlayerScale--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>float</code> x: the scale factor on x axis. <code>float</code> y: the scale factor on y axis. <code>float</code> z: the scale factor on z axis. OR <code>tuple(x, y, z)</code> pos: the scale factor on the XYZ axis.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerScale(id : int, x : float, y : float, z : float) -&gt; Optional[tuple]:\n    \"\"\"\n    !!! note\n        This functions supports ``pass_exception: bool`` optional argument for manual handling exceptions.\n    This function will set the player scale for all players.\n    Original: [setPlayerScale](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerScale/)\n\n    ## Declaration\n    ```python\n    async def setPlayerScale(id : int, x : float, y : float, z : float) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `float` **x**: the scale factor on x axis.\n    `float` **y**: the scale factor on y axis.\n    `float` **z**: the scale factor on z axis.\n    OR\n    `tuple(x, y, z)` **pos**: the scale factor on the XYZ axis.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/player/setPlayerSkillWeapon/","title":"<code>function</code> setPlayerSkillWeapon","text":"<p>This function will set the player skill weapon for all players. Original: setPlayerSkillWeapon</p>"},{"location":"functions/player/setPlayerSkillWeapon/#src.pyg2o.functions.player.setPlayerSkillWeapon--declaration","title":"Declaration","text":"<pre><code>async def setPlayerSkillWeapon(id : int, skillId : int, percentage : int)\n</code></pre>"},{"location":"functions/player/setPlayerSkillWeapon/#src.pyg2o.functions.player.setPlayerSkillWeapon--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> skillId: For more information see Skill weapon constants. <code>int</code> percentage: the percentage in range &lt;0, 100&gt;.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerSkillWeapon(id : int, skillId : int, percentage : int):\n    \"\"\"\n    This function will set the player skill weapon for all players.\n    Original: [setPlayerSkillWeapon](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerSkillWeapon/)\n\n    ## Declaration\n    ```python\n    async def setPlayerSkillWeapon(id : int, skillId : int, percentage : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **skillId**: For more information see [Skill weapon constants](../../constants/skill-weapon.md).\n    `int` **percentage**: the percentage in range &lt;0, 100&gt;.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerStrength/","title":"<code>function</code> setPlayerStrength","text":"<p>This function will set the player strength points for all players. Original: setPlayerStrength</p>"},{"location":"functions/player/setPlayerStrength/#src.pyg2o.functions.player.setPlayerStrength--declaration","title":"Declaration","text":"<pre><code>async def setPlayerStrength(id : int, strength : int)\n</code></pre>"},{"location":"functions/player/setPlayerStrength/#src.pyg2o.functions.player.setPlayerStrength--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> strength: strength points amount.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerStrength(id : int, strength : int):\n    \"\"\"\n    This function will set the player strength points for all players.\n    Original: [setPlayerStrength](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerStrength/)\n\n    ## Declaration\n    ```python\n    async def setPlayerStrength(id : int, strength : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **strength**: strength points amount.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerTalent/","title":"<code>function</code> setPlayerTalent","text":"<p>This function will toggle the player talent for all players. Original: setPlayerTalent</p>"},{"location":"functions/player/setPlayerTalent/#src.pyg2o.functions.player.setPlayerTalent--declaration","title":"Declaration","text":"<pre><code>async def setPlayerTalent(id : int, talentId : int, talentValue : int)\n</code></pre>"},{"location":"functions/player/setPlayerTalent/#src.pyg2o.functions.player.setPlayerTalent--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> talentId: the talent id. For more information see Talent constants. <code>int</code> talentValue: the new talent value.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerTalent(id : int, talentId : int, talentValue : int):\n    \"\"\"\n    This function will toggle the player talent for all players.\n    Original: [setPlayerTalent](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerTalent/)\n\n    ## Declaration\n    ```python\n    async def setPlayerTalent(id : int, talentId : int, talentValue : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **talentId**: the talent id. For more information see [Talent constants](../../constants/talent.md).\n    `int` **talentValue**: the new talent value.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerVirtualWorld/","title":"<code>function</code> setPlayerVirtualWorld","text":"<p>This function will set the player virtual world for all players. Virtual worlds are separate logical worlds on the same physical world. Original: setPlayerVirtualWorld</p>"},{"location":"functions/player/setPlayerVirtualWorld/#src.pyg2o.functions.player.setPlayerVirtualWorld--declaration","title":"Declaration","text":"<pre><code>async def setPlayerVirtualWorld(id : int, virtualWorld : int)\n</code></pre>"},{"location":"functions/player/setPlayerVirtualWorld/#src.pyg2o.functions.player.setPlayerVirtualWorld--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> virtualWorld: the virtual world id in range &lt;0, 65535&gt;.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerVirtualWorld(id : int, virtualWorld : int):\n    \"\"\"\n    This function will set the player virtual world for all players.\n    Virtual worlds are separate logical worlds on the same physical world.\n    Original: [setPlayerVirtualWorld](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerVirtualWorld/)\n\n    ## Declaration\n    ```python\n    async def setPlayerVirtualWorld(id : int, virtualWorld : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **virtualWorld**: the virtual world id in range &lt;0, 65535&gt;.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerVisual/","title":"<code>function</code> setPlayerVisual","text":"<p>This function will set the player visual for all players. Original: setPlayerVisual</p>"},{"location":"functions/player/setPlayerVisual/#src.pyg2o.functions.player.setPlayerVisual--declaration","title":"Declaration","text":"<pre><code>async def setPlayerVisual(id : int, bodyModel : str, bodyTxt : int, headModel : str, headTxt : int)\n</code></pre>"},{"location":"functions/player/setPlayerVisual/#src.pyg2o.functions.player.setPlayerVisual--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> bodyModel: the name of the body model (ASC), e.g: <code>HUM_BODY_NAKED0</code>. <code>int</code> bodyTxt: the numeric id of body texture file. Texture id can be read from V(number) filename part, for example, in this file: <code>HUM_BODY_NAKED_V8_C0-C.TEX</code> id is 8. <code>str</code> headModel: the name of the head model (MMS), e.g: <code>HUM_HEAD_PONY</code>. <code>int</code> headTxt: the numeric id of head texture file. Texture id can be read from V(number) filename part, for example, in this file: <code>HUM_HEAD_V18_C0-C.TEX</code> id is 18.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerVisual(id : int, bodyModel : str, bodyTxt : int, headModel : str, headTxt : int):\n    \"\"\"\n    This function will set the player visual for all players.\n    Original: [setPlayerVisual](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerVisual/)\n\n    ## Declaration\n    ```python\n    async def setPlayerVisual(id : int, bodyModel : str, bodyTxt : int, headModel : str, headTxt : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **bodyModel**: the name of the body model (ASC), e.g: `HUM_BODY_NAKED0`.\n    `int` **bodyTxt**: the numeric id of body texture file. Texture id can be read from V(number) filename part, for example, in this file: `HUM_BODY_NAKED_V8_C0-C.TEX` id is 8.\n    `str` **headModel**: the name of the head model (MMS), e.g: `HUM_HEAD_PONY`.\n    `int` **headTxt**: the numeric id of head texture file. Texture id can be read from V(number) filename part, for example, in this file: `HUM_HEAD_V18_C0-C.TEX` id is 18.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerWeaponMode/","title":"<code>function</code> setPlayerWeaponMode","text":"<p>This function will set the player weapon mode for all players. Original: setPlayerWeaponMode</p>"},{"location":"functions/player/setPlayerWeaponMode/#src.pyg2o.functions.player.setPlayerWeaponMode--declaration","title":"Declaration","text":"<pre><code>async def setPlayerWeaponMode(id : int, weaponMode : int)\n</code></pre>"},{"location":"functions/player/setPlayerWeaponMode/#src.pyg2o.functions.player.setPlayerWeaponMode--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>int</code> weaponMode: For more information see Weapon mode constants.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerWeaponMode(id : int, weaponMode : int):\n    \"\"\"\n    This function will set the player weapon mode for all players.\n    Original: [setPlayerWeaponMode](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerWeaponMode/)\n\n    ## Declaration\n    ```python\n    async def setPlayerWeaponMode(id : int, weaponMode : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `int` **weaponMode**: For more information see [Weapon mode constants](../../constants/weapon-mode.md).\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/setPlayerWorld/","title":"<code>function</code> setPlayerWorld","text":"<p>This function will set the player world for all players. Original: setPlayerWorld</p>"},{"location":"functions/player/setPlayerWorld/#src.pyg2o.functions.player.setPlayerWorld--declaration","title":"Declaration","text":"<pre><code>async def setPlayerWorld(id : int, world : str, startPointName : str)\n</code></pre>"},{"location":"functions/player/setPlayerWorld/#src.pyg2o.functions.player.setPlayerWorld--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> world: the path to the target world (.ZEN). World path is relative to directory <code>_Work/Data/Worlds</code>. <code>str</code> startPointName: the name of the vob to which the player will be moved. If passed empty string, player will be placed at world start point. If vob with specified name doesn't exists or world doesn't have start point, player will be placed at {0, 150, 0} coordinates.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def setPlayerWorld(id : int, world : str, startPointName : str = \"\"):\n    \"\"\"\n    This function will set the player world for all players.\n    Original: [setPlayerWorld](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/setPlayerWorld/)\n\n    ## Declaration\n    ```python\n    async def setPlayerWorld(id : int, world : str, startPointName : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **world**: the path to the target world (.ZEN). World path is relative to directory `_Work/Data/Worlds`.\n    `str` **startPointName**: the name of the vob to which the player will be moved. If passed empty string, player will be placed at world start point. If vob with specified name doesn't exists or world doesn't have start point, player will be placed at {0, 150, 0} coordinates.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/spawnPlayer/","title":"<code>function</code> spawnPlayer","text":"<p>Note</p> <p>Unspawned players can't see other players, items, etc. and are invisible for others.</p> <p>This function will spawn the player. Players are always in unspawned state after joining to server or after respawning. Original: spawnPlayer</p>"},{"location":"functions/player/spawnPlayer/#src.pyg2o.functions.player.spawnPlayer--declaration","title":"Declaration","text":"<pre><code>async def spawnPlayer(id : int)\n</code></pre>"},{"location":"functions/player/spawnPlayer/#src.pyg2o.functions.player.spawnPlayer--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def spawnPlayer(id : int):\n    \"\"\"\n    !!! note\n        Unspawned players can't see other players, items, etc. and are invisible for others.\n    This function will spawn the player.\n    Players are always in unspawned state after joining to server or after respawning.\n    Original: [spawnPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/spawnPlayer/)\n\n    ## Declaration\n    ```python\n    async def spawnPlayer(id : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/stopAni/","title":"<code>function</code> stopAni","text":"<p>This function is used to stop played animation on player for all players. Original: stopAni</p>"},{"location":"functions/player/stopAni/#src.pyg2o.functions.player.stopAni--declaration","title":"Declaration","text":"<pre><code>async def stopAni(id : int, aniName : str)\n</code></pre>"},{"location":"functions/player/stopAni/#src.pyg2o.functions.player.stopAni--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> aniName: the name of the animation that you want to stop. The default value is \"\" which means that the first active ani will be stopped.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def stopAni(id : int, aniName : str = \"\"):\n    \"\"\"\n    This function is used to stop played animation on player for all players.\n    Original: [stopAni](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/stopAni/)\n\n    ## Declaration\n    ```python\n    async def stopAni(id : int, aniName : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **aniName**: the name of the animation that you want to stop. The default value is \\\"\\\" which means that the first active ani will be stopped.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/stopFaceAni/","title":"<code>function</code> stopFaceAni","text":"<p>This function is used to stop played face animation on player. Original: stopFaceAni</p>"},{"location":"functions/player/stopFaceAni/#src.pyg2o.functions.player.stopFaceAni--declaration","title":"Declaration","text":"<pre><code>async def stopFaceAni(id : int, aniName : str)\n</code></pre>"},{"location":"functions/player/stopFaceAni/#src.pyg2o.functions.player.stopFaceAni--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> aniName: the name of the animation that you want to stop. The default value is \"\" which means that the first active ani will be stopped.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def stopFaceAni(id : int, aniName : str = \"\"):\n    \"\"\"\n    This function is used to stop played face animation on player.\n    Original: [stopFaceAni](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/stopFaceAni/)\n\n    ## Declaration\n    ```python\n    async def stopFaceAni(id : int, aniName : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **aniName**: the name of the animation that you want to stop. The default value is \\\"\\\" which means that the first active ani will be stopped.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/unequipItem/","title":"<code>function</code> unequipItem","text":"<p>Note</p> <p>If you want to unequip weapon/shield, first make sure that player is in <code>WEAPONMODE_NONE</code>.</p> <p>This function is used to unequip item from player for all players. Original: unequipItem</p>"},{"location":"functions/player/unequipItem/#src.pyg2o.functions.player.unequipItem--declaration","title":"Declaration","text":"<pre><code>async def unequipItem(id : int, instance : str)\n</code></pre>"},{"location":"functions/player/unequipItem/#src.pyg2o.functions.player.unequipItem--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def unequipItem(id : int, instance : str):\n    \"\"\"\n    !!! note\n        If you want to unequip weapon/shield, first make sure that player is in `WEAPONMODE_NONE`.\n    This function is used to unequip item from player for all players.\n    Original: [unequipItem](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/unequipItem/)\n\n    ## Declaration\n    ```python\n    async def unequipItem(id : int, instance : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/unreadySpell/","title":"<code>function</code> unreadySpell","text":"<p>This function will cause player to unready active spell. It works almost the same as removeWeapon, but also stops hero if he's moving before hiding the active spell. Original: unreadySpell</p>"},{"location":"functions/player/unreadySpell/#src.pyg2o.functions.player.unreadySpell--declaration","title":"Declaration","text":"<pre><code>async def unreadySpell(id : int)\n</code></pre>"},{"location":"functions/player/unreadySpell/#src.pyg2o.functions.player.unreadySpell--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def unreadySpell(id : int):\n    \"\"\"\n    This function will cause player to unready active spell. It works almost the same as [removeWeapon](removeWeapon.md), but also stops hero if he's moving before hiding the active spell.\n    Original: [unreadySpell](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/unreadySpell/)\n\n    ## Declaration\n    ```python\n    async def unreadySpell(id : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/unspawnPlayer/","title":"<code>function</code> unspawnPlayer","text":"<p>Note</p> <p>Unspawned players can't see other players, items, etc. and are invisible for others.</p> <p>This function will unspawn the player. Original: unspawnPlayer</p>"},{"location":"functions/player/unspawnPlayer/#src.pyg2o.functions.player.unspawnPlayer--declaration","title":"Declaration","text":"<pre><code>async def unspawnPlayer(id : int)\n</code></pre>"},{"location":"functions/player/unspawnPlayer/#src.pyg2o.functions.player.unspawnPlayer--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def unspawnPlayer(id : int):\n    \"\"\"\n    !!! note\n        Unspawned players can't see other players, items, etc. and are invisible for others.\n    This function will unspawn the player.\n    Original: [unspawnPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/unspawnPlayer/)\n\n    ## Declaration\n    ```python\n    async def unspawnPlayer(id : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/useItem/","title":"<code>function</code> useItem","text":"<p>This function will try to use, interact, open item by player. Original: useItem</p>"},{"location":"functions/player/useItem/#src.pyg2o.functions.player.useItem--declaration","title":"Declaration","text":"<pre><code>async def useItem(id : int, instance : str)\n</code></pre>"},{"location":"functions/player/useItem/#src.pyg2o.functions.player.useItem--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the item instance from Daedalus scripts.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def useItem(id : int, instance : str):\n    \"\"\"\n    This function will try to use, interact, open item by player.\n    Original: [useItem](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/useItem/)\n\n    ## Declaration\n    ```python\n    async def useItem(id : int, instance : str)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the item instance from Daedalus scripts.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/player/useItemToState/","title":"<code>function</code> useItemToState","text":"<p>This function will try to use, interact, open item in specific state by player. Original: useItemToState</p>"},{"location":"functions/player/useItemToState/#src.pyg2o.functions.player.useItemToState--declaration","title":"Declaration","text":"<pre><code>async def useItemToState(id : int, instance : str, state : int)\n</code></pre>"},{"location":"functions/player/useItemToState/#src.pyg2o.functions.player.useItemToState--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id. <code>str</code> instance: the item instance from Daedalus scripts. <code>int</code> state: the state that you'll start from interacting with item.</p> Source code in <code>src/pyg2o/functions/player.py</code> <pre><code>async def useItemToState(id : int, instance : str, state : int):\n    \"\"\"\n    This function will try to use, interact, open item in specific state by player.\n    Original: [useItemToState](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/player/useItemToState/)\n\n    ## Declaration\n    ```python\n    async def useItemToState(id : int, instance : str, state : int)\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    `str` **instance**: the item instance from Daedalus scripts.\n    `int` **state**: the state that you'll start from interacting with item.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/streamer/findNearbyPlayers/","title":"<code>function</code> findNearbyPlayers","text":"<p>This function will search for nearest players, that matches given query arguments. Original: findNearbyPlayers</p>"},{"location":"functions/streamer/findNearbyPlayers/#src.pyg2o.functions.streamer.findNearbyPlayers--declaration","title":"Declaration","text":"<pre><code>async def findNearbyPlayers(position : dict, radius : int, world : str, virtual_world : int = 0) -&gt; list\n</code></pre>"},{"location":"functions/streamer/findNearbyPlayers/#src.pyg2o.functions.streamer.findNearbyPlayers--parameters","title":"Parameters","text":"<p><code>dict {x, y, z}</code> position: the centroid position. <code>int</code> radius: the maximum radius to search from centroid. <code>str</code> world: the world used to find players. <code>int</code> virtual_world: the virtual world used to find players.</p>"},{"location":"functions/streamer/findNearbyPlayers/#src.pyg2o.functions.streamer.findNearbyPlayers--returns","title":"Returns","text":"<p><code>list [int]</code>: ids of nearby players.</p> Source code in <code>src/pyg2o/functions/streamer.py</code> <pre><code>async def findNearbyPlayers(position : dict, radius : int, world : str, virtual_world : int = 0) -&gt; list:\n    \"\"\"\n    This function will search for nearest players, that matches given query arguments.\n    Original: [findNearbyPlayers](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/streamer/findNearbyPlayers/)\n\n    ## Declaration\n    ```python\n    async def findNearbyPlayers(position : dict, radius : int, world : str, virtual_world : int = 0) -&gt; list\n    ```\n    ## Parameters\n    `dict {x, y, z}` **position**: the centroid position.\n    `int` **radius**: the maximum radius to search from centroid.\n    `str` **world**: the world used to find players.\n    `int` **virtual_world**: the virtual world used to find players.\n    ## Returns\n    `list [int]`: ids of nearby players.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/streamer/getSpawnedPlayersForPlayer/","title":"<code>function</code> getSpawnedPlayersForPlayer","text":"<p>This function is used to retrieve currently spawned players for given player. Original: getSpawnedPlayersForPlayer</p>"},{"location":"functions/streamer/getSpawnedPlayersForPlayer/#src.pyg2o.functions.streamer.getSpawnedPlayersForPlayer--declaration","title":"Declaration","text":"<pre><code>async def getSpawnedPlayersForPlayer(id : int) -&gt; list\n</code></pre>"},{"location":"functions/streamer/getSpawnedPlayersForPlayer/#src.pyg2o.functions.streamer.getSpawnedPlayersForPlayer--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/streamer/getSpawnedPlayersForPlayer/#src.pyg2o.functions.streamer.getSpawnedPlayersForPlayer--returns","title":"Returns","text":"<p><code>list [int]</code>: ids of spawned players.</p> Source code in <code>src/pyg2o/functions/streamer.py</code> <pre><code>async def getSpawnedPlayersForPlayer(id : int) -&gt; list:\n    \"\"\"\n    This function is used to retrieve currently spawned players for given player.\n    Original: [getSpawnedPlayersForPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/streamer/getSpawnedPlayersForPlayer/)\n\n    ## Declaration\n    ```python\n    async def getSpawnedPlayersForPlayer(id : int) -&gt; list\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `list [int]`: ids of spawned players.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/streamer/getStreamedPlayersByPlayer/","title":"<code>function</code> getStreamedPlayersByPlayer","text":"<p>This function is used to retrieve currently streamed players by given player. More details: Streamed players are basically clients, that has spawned given player in their game. Please notice, that player can be spawned only one way. Which means that there are situation were player 1 is spawned for player 2, but not the other way arount. Simple examples: - Invisible players cannot be seen, but they can see everyone nearby. - Flying around world using camera. Original: getStreamedPlayersByPlayer</p>"},{"location":"functions/streamer/getStreamedPlayersByPlayer/#src.pyg2o.functions.streamer.getStreamedPlayersByPlayer--declaration","title":"Declaration","text":"<pre><code>async def getStreamedPlayersByPlayer(id : int) -&gt; list\n</code></pre>"},{"location":"functions/streamer/getStreamedPlayersByPlayer/#src.pyg2o.functions.streamer.getStreamedPlayersByPlayer--parameters","title":"Parameters","text":"<p><code>int</code> id: the player id.</p>"},{"location":"functions/streamer/getStreamedPlayersByPlayer/#src.pyg2o.functions.streamer.getStreamedPlayersByPlayer--returns","title":"Returns","text":"<p><code>list [int]</code>: ids of streamed players.</p> Source code in <code>src/pyg2o/functions/streamer.py</code> <pre><code>async def getStreamedPlayersByPlayer(id : int) -&gt; list:\n    \"\"\"\n    This function is used to retrieve currently streamed players by given player. More details: Streamed players are basically clients, that has spawned given player in their game. Please notice, that player can be spawned only one way. Which means that there are situation were player 1 is spawned for player 2, but not the other way arount. Simple examples: - Invisible players cannot be seen, but they can see everyone nearby. - Flying around world using camera.\n    Original: [getStreamedPlayersByPlayer](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/streamer/getStreamedPlayersByPlayer/)\n\n    ## Declaration\n    ```python\n    async def getStreamedPlayersByPlayer(id : int) -&gt; list\n    ```\n    ## Parameters\n    `int` **id**: the player id.\n    ## Returns\n    `list [int]`: ids of streamed players.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return result\n</code></pre>"},{"location":"functions/waypoint/getNearestWaypoint/","title":"<code>function</code> getNearestWaypoint","text":"<p>This function is used to retrieve the information about nearest waypoint from the specified position. Original: getNearestWaypoint</p>"},{"location":"functions/waypoint/getNearestWaypoint/#src.pyg2o.functions.waypoint.getNearestWaypoint--declaration","title":"Declaration","text":"<pre><code>async def getNearestWaypoint(world : str, x : int, y : int, z : int) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/waypoint/getNearestWaypoint/#src.pyg2o.functions.waypoint.getNearestWaypoint--parameters","title":"Parameters","text":"<p><code>str</code> world: the world name in which the waypoint exists. <code>int</code> x: the position in the world on the x axis. <code>int</code> y: the position in the world on the y axis. <code>int</code> z: the position in the world on the z axis.</p>"},{"location":"functions/waypoint/getNearestWaypoint/#src.pyg2o.functions.waypoint.getNearestWaypoint--returns","title":"Returns","text":"<p><code>tuple (name, x, y, z)</code>: Waypoint information.</p> Source code in <code>src/pyg2o/functions/waypoint.py</code> <pre><code>async def getNearestWaypoint(world : str, x : int, y : int, z : int, distance: int = -1) -&gt; Optional[tuple]:\n    \"\"\"\n    This function is used to retrieve the information about nearest waypoint from the specified position.\n    Original: [getNearestWaypoint](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/waypoint/getNearestWaypoint/)\n\n    ## Declaration\n    ```python\n    async def getNearestWaypoint(world : str, x : int, y : int, z : int) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `str` **world**: the world name in which the waypoint exists.\n    `int` **x**: the position in the world on the x axis.\n    `int` **y**: the position in the world on the y axis.\n    `int` **z**: the position in the world on the z axis.\n    ## Returns\n    `tuple (name, x, y, z)`: Waypoint information.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['name'], result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"},{"location":"functions/waypoint/getWaypoint/","title":"<code>function</code> getWaypoint","text":"<p>This function is used to retrieve the position of specified waypoint. Original: getWaypoint</p>"},{"location":"functions/waypoint/getWaypoint/#src.pyg2o.functions.waypoint.getWaypoint--declaration","title":"Declaration","text":"<pre><code>async def getWaypoint(world : str, name : str) -&gt; Optional[tuple]\n</code></pre>"},{"location":"functions/waypoint/getWaypoint/#src.pyg2o.functions.waypoint.getWaypoint--parameters","title":"Parameters","text":"<p><code>str</code> world: the world name in which the waypoint exists. <code>str</code> name: the name of the waypoint.</p>"},{"location":"functions/waypoint/getWaypoint/#src.pyg2o.functions.waypoint.getWaypoint--returns","title":"Returns","text":"<p><code>dict {x, y, z}</code>: The position of waypoint.</p> Source code in <code>src/pyg2o/functions/waypoint.py</code> <pre><code>async def getWaypoint(world : str, name : str) -&gt; Optional[tuple]:\n    \"\"\"\n    This function is used to retrieve the position of specified waypoint.\n    Original: [getWaypoint](https://gothicmultiplayerteam.gitlab.io/docs/0.3.0/script-reference/server-functions/waypoint/getWaypoint/)\n\n    ## Declaration\n    ```python\n    async def getWaypoint(world : str, name : str) -&gt; Optional[tuple]\n    ```\n    ## Parameters\n    `str` **world**: the world name in which the waypoint exists.\n    `str` **name**: the name of the waypoint.\n    ## Returns\n    `dict {x, y, z}`: The position of waypoint.\n    \"\"\"\n    data = f'return {get_call_repr()}'\n\n    server = await PythonWebsocketServer.get_server()\n    result = await server.make_request(data)\n    return (result['x'], result['y'], result['z']) if result is not None else (None, None, None)\n</code></pre>"}]}